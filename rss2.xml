<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>rasauq1122&#39;s Archive</title>
    <link>http://rasauq1122.github.io/</link>
    
    <atom:link href="http://rasauq1122.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>제 블로그를 방문해주셔서 감사합니다.</description>
    <pubDate>Tue, 07 Mar 2023 09:34:43 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>ChatGPT를 활용하여 블로그 포스팅 주제 추천 받기</title>
      <link>http://rasauq1122.github.io/2023/03/07/blog-posting-with-chatgpt/</link>
      <guid>http://rasauq1122.github.io/2023/03/07/blog-posting-with-chatgpt/</guid>
      <pubDate>Tue, 07 Mar 2023 07:37:40 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;들어가며&quot;&gt;&lt;a href=&quot;#들어가며&quot; class=&quot;headerlink&quot; title=&quot;들어가며&quot;&gt;&lt;/a&gt;들어가며&lt;/h2&gt;&lt;p&gt;안녕하세요. rasauq1122입니다.&lt;br&gt;혹시 ChatGPT라고 아시나요? 간략하게 설명하자면 질문을 받고 </description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="들어가며"><a href="#들어가며" class="headerlink" title="들어가며"></a>들어가며</h2><p>안녕하세요. rasauq1122입니다.<br>혹시 ChatGPT라고 아시나요? 간략하게 설명하자면 질문을 받고 그 질문에 대해 답변을 보내주는 AI입니다. 그런데 이게 검색 엔진을 대체할 수도 있다는 얘기가 나올 만큼 성능이 놀랍습니다. 예를 들면 어떤 프로그램의 소스 코드를 보내면 코드 리뷰를 해주기도 하고, ‘이런 문제를 푸는 프로그램을 작성해줘’라고 요구하면 소스 코드를 직접 짜주기까지 합니다! 물론 아직까지는 너무 어려운 문제에 대해서는 잘못된 소스 코드를 주기도 하지만 이러한 시도가 있을 수 있다는 자체만으로도 저는 굉장히 놀라웠습니다. </p><p>근데 전 ChatGPT를 매체로 접하기만 했지, 제가 직접 사용해 본 적은 없습니다. 아무리 기술이 많이 발전했다고 하지만 이런 생각마저도 AI한테 맡기면 인간은 언젠가 기계에게 지배당하지 않을까 하는 막연한 생각과 ChatGPT가 보여준 코딩 실력에 대한 질투일지도 모르겠습니다. 그래서 저도 모르게 멀리하고 있었던 것 같았습니다. </p><p>그러다 갑자기 ChatGPT로 블로그 포스팅 주제나 추천받으면 어떨까 싶었습니다. 그거 자체만으로도 블로그 포스팅 주제가 될 것 같기도 하고 운이 좋으면 진짜 좋은 블로그 포스팅 주제 얻어서 그걸로 글을 써도 되니까요. 그럼 시작해보겠습니다!</p><h2 id="ChatGPT를-써보았다"><a href="#ChatGPT를-써보았다" class="headerlink" title="ChatGPT를 써보았다."></a>ChatGPT를 써보았다.</h2><p>한국어로 대답하면 좀 느린 것 같아서 영어로 대답해달라고 했습니다.<br><img src="/2023/03/07/blog-posting-with-chatgpt/gpt1.jpg" alt="gpt1"><br>음… 대충 읽어보니 ‘무엇에 대한 팁’에 대해서 글을 쓰라는 것이 대부분이고 그게 아니면 ‘무엇에 대한 리뷰’를 써보라고 하네요. 팁에 대해서는… 저도 아는 것이 많이 없어서 드릴 수가 없고, 리뷰는 괜찮은 것 같네요! 특히 5번에 최신 기술 경향에 대한 포스팅을 쓰라고 하는 건 괜찮은 것 같습니다. 그런 최신 기술 경향을 쉽게 접근할 수 있는 매체를 또 찾아야 겠지만요. </p><p>다음은 매일매일 반복적으로 쓸 수 있을 법한 포스팅 주제를 물어보았습니다.<br><img src="/2023/03/07/blog-posting-with-chatgpt/gpt2.jpg" alt="gpt2"><br>1번이랑 2번은 너무 사적인 이야기라 블로그 포스팅 주제로는 안 맞는 것 같고, 3번은 영어 공부하는 느낌으로도 괜찮을 것 같네요? 아니면 사자성어라든가? 5번은 마침 ‘오늘의 문제’라는 제가 가입한 학회에서 진행하는 프로그램이 있는데 제가 백준을 안 푼지 좀 오래되서 생각을 좀 해봐야 할 것 같습니다. 아무리 쉬운 문제여도 매일매일 푸는 게 생각보다 힘들더라구요. </p><p>진로에 도움이 될만한 블로그 포스팅 주제는 어떨까요?<br><img src="/2023/03/07/blog-posting-with-chatgpt/gpt3.jpg" alt="gpt3"><br>확실히 진로에 도움이 될 것 같긴 한데…. 이건 뭐랄까. 이미 커리어가 쌓인 사람이 작성할만한 주제인 것 같네요. 질문을 바꿔봅시다.</p><p><img src="/2023/03/07/blog-posting-with-chatgpt/gpt4.jpg" alt="gpt4"><br>ㅋㅋ 근데 이건 굳이 블로그로 써서 포트폴리오에 도움이 되는 게 아니라, 원래 포트폴리오에 도움이 되는 내용을 블로그에 작성한 느낌이네요. 아무래도 블로그 글만 많이 쓴다고 해서 다 포트폴리오에 도움이 되기는 많이 힘들겠죠. 여기서도 최신 기술 경향에 대한 포스팅에 대한 이야기가 나오네요. 긍정적으로 생각해보겠습니다. 또 세미나에 관련된 내용이 있는데 제가 학회에서 작게 진행한 세미나에서 발표한 주제가 있었습니다. 그것도 우려먹어도 괜찮을 것 같네요. </p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>반 장난으로 써본 건데 꽤 수확이 있었던 것 같습니다. 근데 그냥 ChatGPT로 우려먹으면서 글 계속 써도 나쁘지 않을지도 ㅋㅋ? 오늘 내용을 바탕으로 새로운 포스팅에 대해서 생각해보겠습니다. 그럼 오늘도 좋은 하루 되세요~! </p>]]></content:encoded>
      
      
      
      <category domain="http://rasauq1122.github.io/tags/small-talk/">small_talk</category>
      
      
      <comments>http://rasauq1122.github.io/2023/03/07/blog-posting-with-chatgpt/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>여담</title>
      <link>http://rasauq1122.github.io/2023/03/05/small-talk-230305/</link>
      <guid>http://rasauq1122.github.io/2023/03/05/small-talk-230305/</guid>
      <pubDate>Sun, 05 Mar 2023 09:42:08 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;안녕하세요. rasauq1122입니다.&lt;br&gt;개강을 맞이한 저는 … 사실대로 말하자면 하나도 바쁘지 않았습니다. 수강 정정 기간?이라고 해서 출석도 안하고 강의 OT만 받았거든요. 근데 딱히 포스팅을 할 만한 내용이 없어서 글을 못썼네요. 억지로</description>
        
      
      
      
      <content:encoded><![CDATA[<p>안녕하세요. rasauq1122입니다.<br>개강을 맞이한 저는 … 사실대로 말하자면 하나도 바쁘지 않았습니다. 수강 정정 기간?이라고 해서 출석도 안하고 강의 OT만 받았거든요. 근데 딱히 포스팅을 할 만한 내용이 없어서 글을 못썼네요. 억지로 포스팅할만한 내용을 만들기 위해서라도 무언가 새로운 활동을 해야할 지경입니다 ㅎㅎ.</p><p>원래 진행하던 프로젝트 ‘홍합찜’은 여름 방학 이후에 다시 재개할 생각입니다. discord bot이 데이터를 수집하는 데에도 시간이 조금 걸리기도 하고, 웹에 대한 지식은 거의 전무해서, 특히 어떻게 웹페이지를 보여줄 지에 대한 대략적인 view도 아이디어가 없어서, 공부가 조금 필요할 것 같아서 여름 방학 때 여유롭게 할 생각입니다. </p><p>그래서 최근 글쓰기에 대한 책도 좀 읽고 있습니다. 사실 읽다가 지루해서 졸고 다른 책이랑 번갈아가면서 읽고 있긴 하지만, 아무튼 이 책으로 영감을 얻고자 합니다. 지금까지 읽은 내용은 ‘자신이 왜 글을 쓰고 싶은지’에 대해서 생각해보라고 합니다. 잠깐 생각해봤는데 저도 잘 모르겠습니다. 그냥 글 쓰는 것 자체가 재밌는 것 같기도 하고, 글 쓰고 나면 오늘 하루는 무언가 한 것 같은 기분이 들기 때문인 것 같기도 합니다.</p><p>또 하나 갑자기 떠오른 생각. 제가 discord로 통화를 자주 하는 편인데 어쩌다가 친구가 녹음한 제 목소리를 듣게 됐습니다. 그 목소리는 정말이지 충격적이었습니다. 자기가 듣는 목소리와 녹음해서 들을 때 듣는 목소리가 다르다는 걸 얘기하는 게 아닙니다. 음질이 정말이지 들어주기 힘들 정도였습니다. 제가 컴퓨터에서 따로 녹음해서 들어봤을 때는 음질이 그렇게까지 안 좋지 않았던 것 같은데, 다른 친구들의 목소리랑 비교해봤을 때에도 음질이 별로였습니다. 아마 제 다음 소비는 마이크가 되지 않을까 싶습니다….</p><p>개강 이후로, 매일 등교를 위해서 저는 7시에 일어나고 있습니다. 사실 1교시가 있는 것도 아니라 그렇게까지 일찍 일어날 필요는 없는데 뭔가 일찍 일어나면 성실한 사람이 된 기분이라 이렇게 일어나고 있습니다. 사실은 일찍 일어나서 운동을 하려고 했는데, 제 사랑니를 뽑은 의사 선생님이 과도한 운동은 몸에 좋지 않다고 해서…는 핑계고 막상 일어나니 귀찮아서 잘 안가고 있습니다. 언젠가는 꼭 헬스장에 갈 수 있길….</p><p>새로 듣게 된 전공 강의들이 생각보다 재미가 있을 것 같아서 기대가 됩니다. 다만 매일 점심밥 먹고 버스 타고 통학하는 데 드는 고정 비용이 조금 뼈가 아프네요. 다음에는 좀 더 생산적인 포스팅을 할 수 있기를 바라면서 글을 마무리 하겠습니다. 오늘도 좋은 하루 되세요~! </p>]]></content:encoded>
      
      
      <category domain="http://rasauq1122.github.io/categories/small-talk/">small_talk</category>
      
      
      
      <comments>http://rasauq1122.github.io/2023/03/05/small-talk-230305/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>공감은 지능이다</title>
      <link>http://rasauq1122.github.io/2023/03/01/war-for-kindness/</link>
      <guid>http://rasauq1122.github.io/2023/03/01/war-for-kindness/</guid>
      <pubDate>Wed, 01 Mar 2023 06:10:59 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;들어가며&quot;&gt;&lt;a href=&quot;#들어가며&quot; class=&quot;headerlink&quot; title=&quot;들어가며&quot;&gt;&lt;/a&gt;들어가며&lt;/h2&gt;&lt;p&gt;『공감은 지능이다』의 제목을 처음 봤을 때 속에서 무언가 울컥하는 감정과 호기심이 함께 피어 올랐습니다. 저는 </description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="들어가며"><a href="#들어가며" class="headerlink" title="들어가며"></a>들어가며</h2><p>『공감은 지능이다』의 제목을 처음 봤을 때 속에서 무언가 울컥하는 감정과 호기심이 함께 피어 올랐습니다. 저는 제가 공감 능력이 낮다고 생각해본 적은 있어도 지능이 낮다고 생각해본 적은 없기 때문입니다. 그런데 이 책은 마치 저에게 ‘너 T지? 그럼 지능 낮은 거야 ㅋㅋ.’라고 말하는 것 같았습니다. 마케팅이었다면 아주 성공적이었다고 할 수 있겠네요. 결과적으로 저는 이 책을 읽게 되었기 때문입니다. 오늘은 제가 이 책을 읽으면서 인상깊었던 점과 더불어 제 생각에 대해서 글을 써볼까 합니다. 그럼 시작하겠습니다.</p><h2 id="왜-공감할까"><a href="#왜-공감할까" class="headerlink" title="왜 공감할까?"></a>왜 공감할까?</h2><p>얼핏 생각해보면 공감이라는 건 참 이상합니다. 공감이란 기본적으로 타인의 감정에 동조하는 것인데, 진화적인 관점으로 봤을 때는 필요없어 보이기 때문입니다. 옆 사람이 배고파해서 내 식량을 나누어준다는 건 식량이 부족했을 원시 사회에서는 별로 도움이 되지 않아 보입니다.</p><p>그러나 공감은 사실 필수적인 생존 기술 중 하나입니다. 신생아에 대해서 생각해보면 쉽게 이해할 수 있습니다. 이타적인 부모에게서 자라난 신생아는 (자기 자식을 내팽길 정도로) 이기적인 부모에게서 자라난 신생아보다 생존 확률이 높을 것입니다. 이는 인간에게 국한되는 이야기가 아니라 모든 동물에게 적용되는 이야기입니다.</p><p>그 중 인간은 동물 중에서는 육체적으로 강한 편은 아니기 때문에 다른 인간들과 힘을 합쳐야만 할 상황이 여럿 주어졌을 것입니다. 그래서 인간들은 서로 쉽게 관계를 맺을 수 있도록 진화하게 된 것이죠. </p><h2 id="공감은-타고나는-것일까"><a href="#공감은-타고나는-것일까" class="headerlink" title="공감은 타고나는 것일까?"></a>공감은 타고나는 것일까?</h2><blockquote><p>오늘날 공감을 연구하는 심리학자는 극빙을 연구하는 기후학자와 비슷한 처지다. 우리는 해마다 공감과 극빙의 소중함을 더 깊이 깨닫지만, 우리를 둘러싼 세상에서 그 둘은 계속해서 줄어들고 있다.</p><footer><strong>공감은 지능이다</strong><cite>자밀 자키</cite></footer></blockquote><p>그러나 공감은 점점 줄어들고 있습니다. 현대화, 부족주의, 언론사와 소셜미디어가 우리를 분열시키고 공포와 증오의 씨앗이 되는 것입니다. 실제로 지난 40년 동안 심리학자들이 쌓아온 데이터에 따르면 공감 능력은 꾸준히 감소했다는 걸 알 수 있다고 합니다.</p><p>이러한 결과가 필연적인 것일까요? 공감은 하나의 기질이라 태어나자마자 결정되어 바뀌지 않는 타고나는 것이라면, 아마 우리의 미래는 암울할 것으로 보입니다. 계속 공감이 줄어들고 있는데 더 늘릴 수 있는 방법이 없는 것이잖아요? 결론부터 말하자면 아닙니다!</p><p><strong>공감은 연습을 통해 키울 수 있고 그 결과 더 친절해질 수 있다는 게 바로 『공감은 지능이다』의 제목이 의미하는 바입니다.</strong> 공부와 독서를 통해 지능을 높일 수 있는 것처럼 공감도 일종의 지능이라 훈련을 통해 키울 수 있다는 것이죠. 이 책에서는 공감을 늘리는 방법 이외에도 신생아집중치료실 직원들의 사례로 알아보는 ‘지나친 공감의 위험’과 무력 대신 친절과 관용으로 대중의 신뢰를 되찾는 경찰에 대한 이야기도 다루고 있습니다. 이에 대한 내용이 궁금하시다면 책을 구매하여 읽어보시면 좋을 것 같습니다.</p><h2 id="비인간화에-대하여"><a href="#비인간화에-대하여" class="headerlink" title="비인간화에 대하여"></a>비인간화에 대하여</h2><p><img src="/2023/03/01/war-for-kindness/why-does-korean-do-games-well.jpg"></p><p>여러분들은 게임 좋아하시나요? 또 자주 하시나요? 저는 좋아하고 꽤 자주 하는 편입니다. </p><p>주로 하는 게임은 오버워치와 리그 오브 레전드인데, 혼자서 게임을 돌리면 매 판마다 새로운 9명의 사람을 접할 수 있습니다. 그리고 대부분이 저에게 호의적으로 대하지 않습니다. 이건 저 뿐만이 아니라 게임을 즐기는 다른 사람들도 아마 비슷한 처지일 겁니다. 그렇기 때문에 위 사진과 같은 우스겟소리가 나오는 것 같습니다.</p><p>그러나 생각해보면 조금 이상합니다. 제가 현실에서 저런 패드립을 들어본 적은 아예 없거나 아마 손에 꼽을 수 있을 정도로 적은 것 같습니다. 그런데 게임만 하면 저와 제 가까운 사람들에게 향해지는 무수한 악의를 막아내기 위해 저는 최선을 다해 게임을 임해야 하는 것이죠.</p><p>타인을 인간으로 대하지 않는 것, 즉 비인간화는 가장 원초적인 수준에서 공감을 차단합니다. 물론 저라고 아주 깨끗한 채팅만 치면서 살아온 것은 아닙니다. 하지만 우리는 게임을 하면서 임의로 매칭되는 생판 처음보는 타인을 너무나 쉽게 비인간화하고 있는 것은 아닌가 합니다. 똑같이 게임을 즐기기 위해 컴퓨터 키고, 키보드와 마우스를 이용하여 게임을 하고 있는 우리와 같은 인간이라는 인식을 잊어버립니다. </p><p>이걸 보면 공감이 줄어든다는 『공감은 지능이다』 저자의 말이 체감이 됩니다. 하지만 다행인 것은 의도적으로 인간으로 대하지 않는 것이 아니라, 제 생각에는 그저 그 사실을 깜빡할 뿐이 아닌가 싶습니다. 그러니 그 사실을 잊지만 않는다면 우리는 좀 더 악의없이 게임을 할 수 있지 않을까 싶습니다. </p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>사실 이 책은… 꽤나 예전부터 리뷰를 하고 싶었습니다. 근데 그 때마다 너무 귀찮아서 포기했는데 오늘은 결국 리뷰를 하는데 성공했네요! </p><p>이제 저는 내일 개강을 맞이합니다. 오랜만의 학교를 가는 거라 설레기도 하고… 아니 생각해보니까 그냥 안 설레고 피곤하기만 한 것 같네요. 개강 이후로는 글을 주기적으로 쓸 수 있을지 걱정이 됩니다. ㅋㅋ 학과 내용이라도 적어야 하나 싶네요.</p><p>물론 아직 안해봐서 모를 일이죠. 제가 전공을 14학점밖에 안들어서 이번 학기는 좀 널널할 수도 있거든요. 금방 글을 쓸 수 있으면 좋겠네요. 좋은 하루 되세요~!</p>]]></content:encoded>
      
      
      <category domain="http://rasauq1122.github.io/categories/book/">book</category>
      
      
      <category domain="http://rasauq1122.github.io/tags/%EA%B3%B5%EA%B0%90%EC%9D%80-%EC%A7%80%EB%8A%A5%EC%9D%B4%EB%8B%A4/">공감은 지능이다</category>
      
      
      <comments>http://rasauq1122.github.io/2023/03/01/war-for-kindness/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>도메인 구매 후기</title>
      <link>http://rasauq1122.github.io/2023/02/27/laptop/</link>
      <guid>http://rasauq1122.github.io/2023/02/27/laptop/</guid>
      <pubDate>Mon, 27 Feb 2023 12:35:50 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;들어가며&quot;&gt;&lt;a href=&quot;#들어가며&quot; class=&quot;headerlink&quot; title=&quot;들어가며&quot;&gt;&lt;/a&gt;들어가며&lt;/h2&gt;&lt;p&gt;안녕하세요. rasauq1122입니다.&lt;br&gt;오늘은 사랑니를 뽑았습니다. 미루고 미루다가 결국 개강 3일 남기고</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="들어가며"><a href="#들어가며" class="headerlink" title="들어가며"></a>들어가며</h2><p>안녕하세요. rasauq1122입니다.<br>오늘은 사랑니를 뽑았습니다. 미루고 미루다가 결국 개강 3일 남기고 뽑아버렸네요. 그래서 아무것도 하고 싶지 않았지만 이럴 때일수록 행동을 취해야 됩니다! 책에서 본 것 같은데 자세한 원리는 기억이 안나네요. 헛소리는 그만하고 오늘은 어제 열심히 code-server를 공유기 밖 네트워크에서도 활용하기 위해 삽질한 내용에 대해 짧게 포스팅하려고 합니다.</p><h2 id="왜-code-server-쓰나요"><a href="#왜-code-server-쓰나요" class="headerlink" title="왜 code-server 쓰나요?"></a>왜 code-server 쓰나요?</h2><p>이전 포스팅에서 몇 번 설명했습니다만 code-server는 코드 에디터 VS Code를 브라우저 상에서 이용할 수 있도록 서버를 구동하는 일종의 프레임워크?입니다. Windows 환경에서는 개발이 어렵기 때문에 저 같은 경우엔 따로 WSL 같은 걸 깔아서 ubuntu를 이용하곤 했습니다. 그런데 라즈베리파이에서 code-server를 이용하면 따로 WSL 같은 걸 이용하지 않고도 linux 환경에서 개발을 할 수 있다는 장점이 있습니다. 제 개인적으로는 WSL이 완벽하게 linux를 대체해주는 것이 아니라 그냥 linux 환경에서 실행하면 작동하는 명령어들도 꽤 자주 버그가 나서 stackoverflow를 뒤졌던 경험이 있었습니다.</p><p>그리고 작업 환경이 하나로 고정된다는 장점이 있습니다. 대표적으로는 굳이 github repo에서 push&#x2F;pull을 하는 작업이 생략된다는 것이 있습니다. 컴퓨터공학도라면 데스크탑 말고도 노트북이 하나 있는 것이 학교 생활을 원할하게 해준다는 것에는 모두 공감하시리라 믿습니다. 저 또한 노트북이 있고 학교에서 조원들과 모여서 프로젝트를 진행할 때 자주 썼습니다. 근데 프로젝트를 진행하다 보면 노트북으로는 너무 느려서 데스크탑으로 환경을 이전할 때도 많습니다. 그럴 때면 mysql상의 데이터나 ubuntu package 같은 경우는 push&#x2F;pull만으로 불러올 수가 없어서 시간이 걸리기 마련이었습니다. </p><p>… 사실 다 필요없고 뭔가 낭만있지 않나요? 라즈베리파이 사서 code-server 돌리고 도메인까지 연결해서 접속하도록 설정하는 모든 과정 말이에요! code-server가 있으면 편하다는 장점 만큼이나 낭만있다는 장점도 저에게 있어서는 굉장히 커 보였습니다 ㅎㅎ.</p><h2 id="domain과-포트포워딩"><a href="#domain과-포트포워딩" class="headerlink" title="domain과 포트포워딩"></a>domain과 포트포워딩</h2><p>결과물이 낭만있는 것만큼이나 과정은 꽤나 지옥이었습니다. 모든 과정은 제가 처음으로 진행해보는 것이었을 뿐더러 사전지식 조차도 전무하였습니다. 열심히 깨지고 부셔져 보는 것 말고는 방법이 없었죠.</p><p>가장 많이 참고했던 글은 <a href="https://hakawati.co.kr/445">이 글</a>입니다. 사실 공부가 필요없을 정도로 입력해야하는 명령어라든지 등을 되게 잘 알려주셨습니다. 제 글을 읽고 혹시나 code-server 구동하실 생각이 있다면 이 글을 참고하시면 좋을 것 같습니다.</p><p>하지만 위 글을 쓰신 분은 이미 domain을 하나 소유하고 계셨기에 그에 대한 설명은 없다는 점이 좀 아쉬웠습니다. 그래서 제 개인 domain을 얻기 위해서는 어떻게 해야하는지 찾아봤습니다. 대충 조사해보니 <a href="https://domains.google/">Google Domains</a>라는 곳에서 내가 원하는 domain 이름을 입력하여 구매할 수 있다고 합니다. 그래서 domain 이름만 좀 고민하다가 1년에 12달러로 구매하였습니다. 제 개인적으로는 생각보다 싼 가격이라 놀랐습니다. 근데 좀 더 알아보니까 무료로 domain을 열어주는 곳도 많더라구요? 근데 Google 공식 사이트에서 하는 게 자료도 많고 더 편할 것 같아서 저는 저기서 구매했습니다.</p><p>그러고 나서 보니까 제가 한 건 그냥 domain을 사용할 수 있는 권리를 얻은 것이었고, domain을 사용하기 위해서는 구체적으로 어떻게 해야하는지에 대해서는 지식이 전무하였습니다. 그래서 다시 공부를 해야 했고, 공부를 하면서 가장 도움이 많이 됐던 영상은 얄팍한 코딩사전의 <a href="https://www.youtube.com/watch?app=desktop&v=6fc9NAQkcv0">이 영상</a>입니다. 덕분에 A Record로 DNS 설정을 할 수 있게 되었죠.</p><p>그 다음에는 왠지 포트포워딩이라는 걸 해주어야 할 것 같았습니다. 예전에 Hamachi로 Minecraft 서버 돌리던 짬에서 나온 바이브라고 할까요? 사실 전 포트포워딩이 뭔지 잘 모르지만, 일단 외부 네트워크에서 제 서버에 접근하기 위해서는 포트포워딩을 해야한다는 사실 만큼은 알고 있었습니다. http의 기본 포트는 80번 포트이므로, 80번 포트로 들어오는 요청을 제 라즈베리파이가 code-server를 열어둔 포트로 연결해주면 됩니다. 그렇게 하면 A Record로 제 컴퓨터와 연결된 domain이 code-server로 접근하여 외부 네트워크에서도 code-server를 이용할 수 있게 됩니다!</p><h2 id="보안이-문제다…"><a href="#보안이-문제다…" class="headerlink" title="보안이 문제다…."></a>보안이 문제다….</h2><p>외부 네트워크로 제 라즈베리파이가 연결되었다는 것은 저 뿐만이 아니라 전 세계 모든 사람들도 제 라즈베리파이로 연결할 수 있다는 걸 의미합니다. 그러면 제 라즈베리파이뿐만 아니라 제 개인정보도 굉장히 취약해지게 되리라는 것은 쉽게 예상이 됩니다.</p><p>그 문제에 대해 경고하고 해결법을 알려주는 것 또한 앞서 소개했던 <a href="https://hakawati.co.kr/445">이 글</a>입니다. nginx로 서버를 열고 다양한 플러그인을 이용하여 https 보안 접속을 하는 방법도 설명합니다. </p><p>… 다만 저는 위 글에서 친절하게 설명된 내용을 똑같이 따라 했음에도 불구하고 https 보안 접속이 아무리 해도 안되었습니다! 1시간 동안 열심히 조사해본 결과, 저 방법 자체의 문제가 아니라 제 포트포워딩 문제라는 것을 깨우쳤습니다. nginx는 80번 포트로 들어오는 요청을 제 code-server가 열린 포트로 넘기는 식으로 서버를 열어놨는데, 애초에 80번 포트로 요청이 들어오지 않는 것이었습니다. 그 이유는 제가 80번 포트로 들어오는 요청을 <strong>포트포워딩을 통해 바로, 직접,</strong> code-server가 열린 포트로 넘겨주었기 때문이었습니다…. 그리하여 저는 포트포워딩을 통해 80번 포트로 들어오는 요청은 라즈베리파이의 80번 포트로 연결하여 이 문제를 해결할 수 있었습니다.</p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>결국 이런 저런 사소한 문제들도 마저 해결하여 지금은 domain을 통해 제 code-server로 비교적 안전하게 접근할 수 있게 되었습니다! domain 주소는 따로 공개하지 않으려고 합니다…. 아무래도 가장 좋은 보안 방법은 애초에 노출을 안 시키는 것이니까요….</p><p>사실은 남아있는 군적금으로 맥북을 사려고 했는데, code-server 때문에 재고하고 있습니다. linux 터미널을 쓰기 편한 환경이다보니 맥북이 좋지 않을까라고 생각했는데 결국 code-server를 이용하여 어디서든 제 개인 linux 환경을 이용할 수 있게 되었기 때문입니다. </p><p>제 개인적으로는 맥북이 그렇게나 예쁘게 생겼나 싶기도 하고, 매직 키보드로 아이패드에서 코딩 좀 해본 소감으로는 cmd + c, v 와 같이 Windows 환경에서의 키보드와 괴리가 좀 심하게 체감했습니다. 그러면 남은 건 아이폰 등과의 호환인데 사실 그것도 그렇게 체감이 될까 싶습니다. 애초에 멀?쩡한 노트북이 있는데 새로 노트북을 사야하나 싶기도 하고요. </p><p>갑자기 이런 저런 생각이 꼬리를 물면서 그냥 돈 아끼는 셈 치고 원래 있는 노트북이나 다시 쓰자는 결론이 들더라구요. 정 불편해서 못쓰겠으면 그때라도 바꾸는 식으로요! 근데 아마 맥북을 살지도 조금 고민을 해봐야겠습니다. OS가 Windows인게 사실 Windows만 쓰던 사람은 훨씬 편할테니까요…. </p><p>제 고민은 뒤로 하고, 이제 글을 마치겠습니다~. 오늘도 좋은 하루 되세요~!</p>]]></content:encoded>
      
      
      <category domain="http://rasauq1122.github.io/categories/small-talk/">small_talk</category>
      
      
      
      <comments>http://rasauq1122.github.io/2023/02/27/laptop/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>라즈베리파이 구매 후기</title>
      <link>http://rasauq1122.github.io/2023/02/25/raspberry/</link>
      <guid>http://rasauq1122.github.io/2023/02/25/raspberry/</guid>
      <pubDate>Sat, 25 Feb 2023 11:32:09 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;안녕하세요. rasauq1122입니다.&lt;br&gt;라즈베리파이를 16만원이라는 거금을 들여 라즈베리파이를 구매했습니다.&lt;/p&gt;
&lt;p&gt;어제 라즈베리파이가 도착해서 환경을 다시 잡아주느라 조금 고생이 많았네요. 특히 라즈베리파이에서는 mysql 대신 ma</description>
        
      
      
      
      <content:encoded><![CDATA[<p>안녕하세요. rasauq1122입니다.<br>라즈베리파이를 16만원이라는 거금을 들여 라즈베리파이를 구매했습니다.</p><p>어제 라즈베리파이가 도착해서 환경을 다시 잡아주느라 조금 고생이 많았네요. 특히 라즈베리파이에서는 mysql 대신 mariaDB를 사용해야 한다는 점이 좀 흥미롭더라구요. 대충 웹서핑해보니 mariaDB는 mysql의 라이센스? 문제를 해결한 데이터베이스라고 합니다. 사용하는 방법도 mysql랑 유사한 수준을 넘어 아예 동일한 것 같더라구요. 두 DBMS 차이가 궁금하긴 하지만 다음에 알아보는 걸로 합시다. </p><p>일단 라즈베리파이를 구매한 목적이었던 웹프로젝트 데이터 수집용 Discord Bot 가동은 완료했습니다. 그 밖에도 code-server라는 vscode를 브라우저에서 접근할 수 있게 해주는 서버를 가동하여 제가 어디서 코딩을 하던 이어서 할 수 있도록 환경을 구성하고자 했습니다. 아직 DNS까지는 처리를 안해서 저희 집 공유기를 벗어나면 접근이 안되지만 그 부분도 나중에 시간이 나면(…) 따로 손을 봐주고 싶네요.</p><p>생각한 것보다 빠르고 쾌적해서 더 마음에 드네요. 다만 라즈베리파이 본체를 만져보니까 온도가 어느정도 뜨거운 것 같던데 방열판이나 쿨러를 달아줘야 할지 고민입니다. 일단 계속 써보다가 애로사항이 생기면 하나씩 해결해주려고 생각하고 있습니다.</p><p>오늘은 이 정도만 글을 짧게 마무리하겠습니다. 좋은 하루 되세요~!</p>]]></content:encoded>
      
      
      <category domain="http://rasauq1122.github.io/categories/development/">development</category>
      
      
      <category domain="http://rasauq1122.github.io/tags/%EB%9D%BC%EC%A6%88%EB%B2%A0%EB%A6%AC%ED%8C%8C%EC%9D%B4/">라즈베리파이</category>
      
      
      <comments>http://rasauq1122.github.io/2023/02/25/raspberry/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>의자에 관한 고찰</title>
      <link>http://rasauq1122.github.io/2023/02/23/about-chair/</link>
      <guid>http://rasauq1122.github.io/2023/02/23/about-chair/</guid>
      <pubDate>Thu, 23 Feb 2023 11:49:02 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;안녕하세요. rasauq1122입니다.&lt;br&gt;오늘은 간단히 의자에 대해서 글을 짧게 써보려고 합니다.&lt;/p&gt;
&lt;p&gt;현재 제가 쓰고 있는 의자는 부모님과 함께 동네 의자 판매점에 방문하여 앉아보고 구매한 의자입니다. 분명 의자 판매점에서 앉아보고 </description>
        
      
      
      
      <content:encoded><![CDATA[<p>안녕하세요. rasauq1122입니다.<br>오늘은 간단히 의자에 대해서 글을 짧게 써보려고 합니다.</p><p>현재 제가 쓰고 있는 의자는 부모님과 함께 동네 의자 판매점에 방문하여 앉아보고 구매한 의자입니다. 분명 의자 판매점에서 앉아보고 샀을 때는 푹신푹신했는데, 집으로 배달된 의자에 앉아보니까 그 쿠션감이 느껴지지 않더라구요. 그래서 살짝 슬펐지만 꽤 무난하게 잘 쓰고 있었습니다. 아마 대학교 2학년때 샀던 것 같으니까 군대에 있던 기간 빼면 1~2년 정도 잘 쓰고 있는 것 같네요.</p><p>그러다가 새로운 의자를 사고 싶다는 욕망이 피어 오르기 시작했습니다. 가장 주요한 이유는 오버워치입니다. ‘게임 하나 때문에 의자를 바꿔?’ 라고 생각하실 수 있고 충분히 이해합니다 ㅎㅎ. 근데 전 이미 게임 하나 때문에 책상도 바꿨습니다…. 잠깐 말이 나와서 옛날 책상에 관한 이야기를 해보겠습니다. 제 옛날 책상은 책상 위에 더 길쭉한 책상 판떼기를 위에 올려 고정시켜놓은 형태였습니다. 그래서 책상 두께가 보통 책상의 두 배라 제 의자를 어느 정도 높이 이상으로 올릴 수 없었습니다. 그러다 보니 의자에 비해서 책상이 너무 높아 장시간 오버워치를 하니 어깨와 팔에 통증이 느껴지더라구요. </p><p>정상적인 사고 방식의 소유자라면 그렇게 팔이 아플 정도로 게임을 하지 않는 것이 올바른 해결방법이겠지만, 저는 악질 게이머 정신의 소유자이었으므로 제 군 적금의 일부를 책상을 바꾸는 데에 투자했습니다. 근데 문제는 ㅋㅋ; 제대로 안 알아보고 사서 바꾼 책상이 원래 의자에 비해 높은 편이었습니다. 차라리 모션 데스크 같은 걸 살 걸 그랬어요…. 비싼 책상이었는데…. </p><p>그래서 저는 ‘이미 오버워치를 하려고 책상을 바꿨는데 나아진 것이 없으니 의자도 바꿔야겠다!’라고 생각하였습니다. 그렇습니다. 매몰 비용의 오류를 몸소 범한 것이었죠. 하지만 불행인지 다행인지, 제 실천력은 0에 수렴하기 때문에 ‘의자를 하나 새로 사야 되는데…’라는 생각만 품고 하루하루 일상을 보냈습니다. 어느날 오른쪽 팔걸이가 떨어져 나가기 전까지는 말이죠. 의자에 몸을 맡기다가 자유 낙하를 경험한 저는 더 이상 의자 구매를 미룰 수 없었습니다. </p><p>그리고 기왕 사는 거 완전 비싸고 좋은 최고급 의자를 하나 사버려야 겠다고 마음을 먹었습니다. 게이머 겸 컴퓨터 공학도인 저는 깨어 있는 시간의 90% 이상을 의자에 앉아서 보내기 때문에, 또 비싼 것이 좋은 것이라는 프리미엄 마케팅에 빠져버렸기 때문이었습니다. 그래서 처음 알아봤던 의자가 ‘허먼밀러’였습니다. 유튜브에서 앉기만 해도 허리를 쫙 펴주는, 아주 건강하게 만들어주는 의자라는 평을 봤던 기억이 있어서 였죠. 물론 180만원을 보고 바로 눈을 돌렸습니다. </p><p>그러다가 ‘사이즈 오브’라는 의자 브랜드를 보게 되었습니다. 이게 구매자의 신체 사이즈를 바탕으로 일종의 맞춤형 의자를 보내주는 식인데 이것도 약간 허먼밀러처럼 바른 자세로 앉는 데 도움을 준다는 설명을 보고 구매를 결정하게 되었습니다. 근데 결론부터 말하면 환불했습니다. 이게 참… 이 브랜드의 영업 정신 같은 게 되게 마음에 들어서 웬만하면 그냥 쓰려고 했는데, 장시간 앉아 있으면 엉덩이 쪽이 되게 아프더라구요. 아마 의자가 제 신체 사이즈랑 잘 안 맞아서 이런 결과가 생기지 않았나 하는 생각이 듭니다. </p><p>그래서 새로운 의자를 물색하다가 또 어제 갑자기 침착맨 유튜브에서 ‘시디즈’에서 이번에 새로 나온 게이밍 의자를 하나 광고 하더라구요. 마침 시디즈 쪽에서 의자를 고를까 하던 참이었는데 참 잘 됐다 싶어서 영상을 보는데 쿨링 시트가 진짜 좋아 보였습니다. 그래서 지금 거기에 꽂혀서 그 의자를 살지 말지 고민하고 있습니다. 가격만 착하면 바로 샀을텐데… 일단은 토요일에 매장에 가서 앉아보고 살지 말지 좀 고민을 더 해볼 생각입니다.</p><p>오늘도 어찌어찌 할당량을 채웠네요 ㅎㅎ! 이 정도로 글을 마치고 나중에 직접 앉아보고 추가로 후기를 남기든지 하겠습니다. 오늘도 좋은 하루 되세요!</p>]]></content:encoded>
      
      
      <category domain="http://rasauq1122.github.io/categories/small-talk/">small_talk</category>
      
      
      
      <comments>http://rasauq1122.github.io/2023/02/23/about-chair/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>여담</title>
      <link>http://rasauq1122.github.io/2023/02/22/small-talk-230222/</link>
      <guid>http://rasauq1122.github.io/2023/02/22/small-talk-230222/</guid>
      <pubDate>Wed, 22 Feb 2023 13:21:05 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;변명&quot;&gt;&lt;a href=&quot;#변명&quot; class=&quot;headerlink&quot; title=&quot;변명&quot;&gt;&lt;/a&gt;변명&lt;/h2&gt;&lt;p&gt;안녕하세요. rasauq1122입니다.&lt;br&gt;엄청 오랜만에 글을 쓰네요. 거의 2주만에 쓰는 것 같습니다. 저번 포스팅에는 변</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="변명"><a href="#변명" class="headerlink" title="변명"></a>변명</h2><p>안녕하세요. rasauq1122입니다.<br>엄청 오랜만에 글을 쓰네요. 거의 2주만에 쓰는 것 같습니다. 저번 포스팅에는 변명거리라도 있었지만 이번에는 그런 거 아예 없습니다…. 그냥 노느라 바빴습니다. 인생 처음으로 스키장도 가보고, 서울에서 술도 마셔보고, 그러면서 놀았습니다. 아무래도 곧 개강이고 놀 시간은 한정되어 있으니 고삐가 풀린 것 같습니다…. </p><h2 id="독서-포스팅에-대하여"><a href="#독서-포스팅에-대하여" class="headerlink" title="독서 포스팅에 대하여"></a>독서 포스팅에 대하여</h2><p>그래도 책은 꾸준히 읽었습니다! 그래서 새로 다 읽은 책들이 좀 있어서 그거에 대해 포스팅을 작성할 예정입니다. 다만 예전에 『역행자』나 『인스타브레인』처럼 책의 내용을 챕터별로 정리하듯이 쓰는게 아니라 단편으로 제일 인상 깊게 읽었던 부분과 그에 대한 제 생각을 써보고 싶습니다. 저번에도 말씀드렸지만 아무래도 남의 생각을 쓰는 것보다 제 생각을 쓰는 것이 더 재밌고 글 쓰기 효과가 더 있을 것 같고… 아무튼 더 장점이 많을 것 같네요. </p><h2 id="프로젝트-‘홍합탕’"><a href="#프로젝트-‘홍합탕’" class="headerlink" title="프로젝트 ‘홍합탕’"></a>프로젝트 ‘홍합탕’</h2><p>그리고 ‘홍합탕’ 프로젝트에 대해서도 조금 말씀드리겠습니다. 결론부터 말씀드리면 디스코드 채팅 메시지에 대한 eventListener 처리는 아마 진행하지 않을 것 같습니다. 지금까지 구현한 voiceState 변경에 따른 eventListener로만 프로젝트를 진행할 예정입니다. </p><p>그렇게 하기로 생각한 이유가 여러 가지가 있습니다. 그 중 첫 번째는 본격적인 데이터 수집을 시작해야 제가 프로젝트를 진행할 맛이 날 것 같기 때문입니다. 새로운 eventListener를 추가하려면 또 discord bot을 계속 멈춰두고 있어야 하기 때문에 데이터 수집이 늦어집니다. 저는 빨리 데이터를 수집했으면 좋을 것 같고 그것이 또 프로젝트 진행 자체에도 긍정적인 영향이 미칠 것 같습니다.</p><p>두 번째는 메시지에 대한 데이터 저장이 꽤나 번거롭다고 느꼈기 때문입니다. 메시지는 문자열 이외에도 하이퍼링크, 파일(사진 등), @everyone과 같은 다양한 정보를 담을 수 있습니다. 한 메시지가 정보를 하나씩만 담을 수 있으면 조금 편했겠지만, 우리 Discord는 사용자의 편의를 위해 앞서 말한 저 정보들은 한번에 복합적으로 메시지에 모두 포함할 수 있습니다. 시도는 안해봤으나 저장을 위해서는 꽤나 복잡한 parsing이 필요해 보였습니다…. </p><p>추출 또한 마찬가지입니다. 문자열에서 유의미한 정보를 뽑아내기 위해서는 문자열 알고리즘(KMP 등)을 이용해야할 필요가 있고, 그렇게까지 열심히 추출한 정보가 정말 ‘유의미’한지도 의문이 들었습니다.</p><p>마지막으로 voiceState 변경에 대한 eventListener로 꽤 괜찮은 유의미한 정보를 뽑아낼 수 있을 것 같다는 생각이 들었습니다. Discord는 보통 메시지를 보내기 위해서 이용하기 보다는 통화를 하기 위해서 이용하는 것 아니겠습니까? 따라서 통화를 진행할 때 발생하는 정보만 가지고도 재밌고 유의미한 정보를 추출할 수 있을 것이라는 생각이 들었습니다.</p><p>위와 같은 결론으로 이제 본격적으로 더 이상의 eventListener 추가없이 데이터 수집에 들어갈 예정입니다. 라즈베리파이도 주문해놨습니다! 이에 대한 포스팅은 또 다음에 쓸 수 있으면 좋겠네요.</p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>지금까지 쉰 건 휴가 받은 거라고 생각하고 다시 글쓰기를 진행해볼까 합니다. 아주 짧게라도 매일매일 꾸준히 쓰는 것이 더 중요하다고 판단이 들어 아주 사소한 내용이라도 포스팅을 올리도록 하겠습니다. 이 다짐은 오래 갔으면 좋겠네요…. 글 읽어주셔서 감사합니다. 좋은 하루 되세요~.</p>]]></content:encoded>
      
      
      <category domain="http://rasauq1122.github.io/categories/small-talk/">small_talk</category>
      
      
      
      <comments>http://rasauq1122.github.io/2023/02/22/small-talk-230222/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>프로젝트 &#39;홍합찜&#39; - 3</title>
      <link>http://rasauq1122.github.io/2023/02/10/HHJ-3/</link>
      <guid>http://rasauq1122.github.io/2023/02/10/HHJ-3/</guid>
      <pubDate>Fri, 10 Feb 2023 05:31:20 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;들어가며&quot;&gt;&lt;a href=&quot;#들어가며&quot; class=&quot;headerlink&quot; title=&quot;들어가며&quot;&gt;&lt;/a&gt;들어가며&lt;/h2&gt;&lt;p&gt;안녕하세요. rasauq1122입니다.&lt;br&gt;최근 포스팅이 4일 전이네요. 매일매일 포스팅을 쓰겠다는 의지는 무</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="들어가며"><a href="#들어가며" class="headerlink" title="들어가며"></a>들어가며</h2><p>안녕하세요. rasauq1122입니다.<br>최근 포스팅이 4일 전이네요. 매일매일 포스팅을 쓰겠다는 의지는 무너져 내리고 말았지만… 제가 그동안 놀기만 했던 건 아닙니다! 그동안 홍합찜 프로젝트을 진행하면서 많은 변경사항이 있었습니다. 오늘은 제가 지금까지의 프로젝트 진행내역에 대해 간단히 포스팅을 작성해볼 생각입니다.</p><h2 id="지금까지는…"><a href="#지금까지는…" class="headerlink" title="지금까지는…"></a>지금까지는…</h2><h3 id="1-Express-js-도입"><a href="#1-Express-js-도입" class="headerlink" title="1. Express.js 도입"></a>1. Express.js 도입</h3><p>VoiceStateUpdate 이벤트에 따른 데이터 처리를 하려고 보니까 중복되는 코드가 너무 많을 것 같다고 느꼈습니다. 그러면 따로 함수를 만들면 코드를 깔끔하게 작성할 수 있을 것이라는 생각이 들었습니다. 그때 디스코드 봇 전용 API를 만들면 아예 봇과 데이터베이스를 분리시킬 수 있다는 걸 깨달았습니다.</p><p>따라서 Express.js를 도입하여 봇이 Event를 감지하면 Event로부터 봇 전용 API 서버에 요청을 보낼 때 필요한 body를 구성하여 요청을 보내는 방식으로 코드를 모두 변경하였습니다. discord bot이 직접 데이터베이스를 접근하지 않고 bot API server에서 데이터베이스를 대신 접근하는 방식인거죠. 이러한 변경이 구체적으로 어떤 장점이 있는지는 잘 모르지만(ㅎㅎ;) 일단 제가 생각하기엔 훨씬 더 깔끔하다는 느낌이 들어서 이런 식으로 변경해보았습니다.</p><h3 id="2-VoiceStateUpdate-이벤트"><a href="#2-VoiceStateUpdate-이벤트" class="headerlink" title="2. VoiceStateUpdate 이벤트"></a>2. VoiceStateUpdate 이벤트</h3><p>그리고 마침내! 7일 전부터 하겠노라 예고(만)했었던 VoiceStateUpdate 이벤트에 따른 데이터 처리를 완료했습니다. 근데 초기에 제가 구상했던 것과는 다른 테이블을 사용하게 되었습니다. 테이블 구조는 다음과 같습니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+-----------+-----------+------+-----+---------+-------+</span><br><span class="line">| Field     | Type      | Null | Key | Default | Extra |</span><br><span class="line">+-----------+-----------+------+-----+---------+-------+</span><br><span class="line">| guild     | bigint    | NO   |     | NULL    |       |</span><br><span class="line">| channel   | bigint    | NO   | PRI | NULL    |       |</span><br><span class="line">| user      | bigint    | NO   | PRI | NULL    |       |</span><br><span class="line">| startTime | timestamp | NO   | PRI | NULL    |       |</span><br><span class="line">| endTime   | timestamp | YES  |     | NULL    |       |</span><br><span class="line">+-----------+-----------+------+-----+---------+-------+</span><br></pre></td></tr></table></figure><p>디스코드 서버 사용자가 어떤 음성 채팅방에서 통화를 진행하면, 그 통화를 시작한 시간과 끝나는 시간을 기록하도록 테이블 구조를 변경해봤습니다. 기존 방식에 비해 데이터 가공이 더 어려울 것 같다는 느낌이 들긴 하지만, 그건 미래의 제가 고생할 일이니까요 ㅎㅎ. </p><p>그리고 위와 같은 테이블을 여러 개 추가로 만들었습니다. voiceState는 어떤 음성 채팅방에서 통화를 하고 있는지뿐만 아니라 사용자가 마이크가 음소거된 상태인지, 화면공유 중인지에 대한 여러 정보도 담고 있습니다. 저는 이 정보들도 나중에 가공하면 꽤나 재밌고 유의미한 결과를 보여줄 것 같아서 추가로 저장하기로 하였습니다.</p><h3 id="3-subscriber-테이블"><a href="#3-subscriber-테이블" class="headerlink" title="3. subscriber 테이블"></a>3. subscriber 테이블</h3><p>처음에는 디스코드 서버 내 역할 기능을 이용하여 데이터를 추출하도록 허용한 사용자들을 구분하려 했습니다. 디스코드 서버 관리자 입장에서 생각해봐도 그 편이 더 육안으로 확인하기 쉽기도 하고, 추후 관리가 쉬울 것 같다는 생각이 들었습니다.</p><p>근데 생각해보니 여러 문제가 있었습니다. 역할은 서버 관리자가 임의로 달아줄 수 있는 것이라서, 개인의 동의 없이도 역할을 강제로 할당받게 되면 봇은 그거에 대한 구분을 할 수 없으므로 데이터 추출을 진행하게 될 것이라는 거죠.</p><p>물론 해결 방법은 있습니다. 디스코드 API는 역할이 변경될 때도 Event가 발생하도록 만들어져 있기 때문에, ①자신이 직접 동의한 적이 없고 ②그럼에도 불구하고 역할을 갖고 있는 사용자를 찾은 후 역할을 지워주면 됩니다. 근데 그러면 결국 어떤 사용자가 직접 동의한 적이 있다는 걸 저장해야 된다는 것이고 그러면 굳이 역할이 큰 의미가 있나 싶었습니다. 어차피 데이터베이스 내에 다 저장이 되어있는 거잖아요?</p><p>그 밖에도 역할 자체를 삭제하거나, 동의한 적이 있는데 역할을 회수당한 사용자에 대한 처리도 너무 애매하고 복잡합니다. 그래서 데이터베이스에 동의한 적이 있는 사람이 다 저장되니 이것이 곧 Discord.Role의 역할을 대신할 수 있을 것이라고 생각했습니다. 그리하여 데이터 추출에 동의한 사람을 저장하는 subscriber 테이블을 만들었고, 디스코드 봇 API 서버 Router에 middleware를 적용하여 subscriber만 데이터를 추출하도록 변경하였습니다.</p><h3 id="4-그-외"><a href="#4-그-외" class="headerlink" title="4. 그 외"></a>4. 그 외</h3><p>그 밖에도 &#x2F;unsubscribe 명령어 추가, 서버가 비정상 종료된 후 부팅될 때 데이터 처리, Event 처리 코드가 길어지는 걸 방지하기 위해 모듈화 등의 작업을 진행했지만, 글에서는 자세히 다루지 않고 넘어가겠습니다. 아무튼 꽤나 바쁜 하루들이었습니다….</p><h2 id="다음은…"><a href="#다음은…" class="headerlink" title="다음은…"></a>다음은…</h2><p>이제 추출할 만한 데이터가 더 있는지 확인해보고 디스코드 봇에 반영한 후, 본격적으로 웹페이지를 만드는 작업을 진행하려고 합니다. 그리고 그 이전에 라즈베리파이를 하나 구매해서 서버를 실제로 돌릴 수 있도록 구성할 수 있으면 좋을 것 같네요.</p><p>아마 추출할 만한 데이터는 message, emoji 외에도 memberUpdate 쪽에서 영감을 얻어볼 생각입니다. 또 Discord.js 홈페이지 들어가서 뽑아먹을 게 있는게 확인해봐야겠네요. 내일 바로 포스팅을 쓸 수 있으면 좋겠지만, 저도 코딩하는 시간이 길어지면 글 쓸 짬이 안나오네요…. 아무튼 아쉬움은 뒤로 하고 다음에 또 찾아뵙도록 하겠습니다. 좋은 하루 되세요~!</p>]]></content:encoded>
      
      
      <category domain="http://rasauq1122.github.io/categories/development/">development</category>
      
      
      <category domain="http://rasauq1122.github.io/tags/project/">project</category>
      
      <category domain="http://rasauq1122.github.io/tags/development/">development</category>
      
      <category domain="http://rasauq1122.github.io/tags/hhj/">hhj</category>
      
      
      <comments>http://rasauq1122.github.io/2023/02/10/HHJ-3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>프로젝트 &#39;홍합찜&#39; - 2</title>
      <link>http://rasauq1122.github.io/2023/02/06/HHJ-2/</link>
      <guid>http://rasauq1122.github.io/2023/02/06/HHJ-2/</guid>
      <pubDate>Sun, 05 Feb 2023 16:57:25 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;들어가며&quot;&gt;&lt;a href=&quot;#들어가며&quot; class=&quot;headerlink&quot; title=&quot;들어가며&quot;&gt;&lt;/a&gt;들어가며&lt;/h2&gt;&lt;p&gt;안녕하세요. rasauq1122입니다.&lt;br&gt;오늘까지 가족 여행을 마치고 돌아왔습니다. 재미는 있는데 내향형인 </description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="들어가며"><a href="#들어가며" class="headerlink" title="들어가며"></a>들어가며</h2><p>안녕하세요. rasauq1122입니다.<br>오늘까지 가족 여행을 마치고 돌아왔습니다. 재미는 있는데 내향형인 저에게는 꽤나 힘든 일정이었습니다.</p><p>원래 늦게 도착할 줄 알았는데, 생각보다 집에 빨리 오게 되어서 오버워치2 배틀패스 200레벨 찍고 개발을 진행하게 되었습니다! 후딱 끝내고 발로란트를 하려고 했는데 생각보다 과정이 만만치 않았습니다…</p><h2 id="오늘은…"><a href="#오늘은…" class="headerlink" title="오늘은…"></a>오늘은…</h2><p>역시 저번에 예고한대로 VoiceStateUpdate에 따른 데이터 추출을 하려고 진행하였습니다. 그렇지만 세상은 늘 계획대로 되지 않는 법이더라구요. 제가 아주 중요한 걸 깜빡하고 있었습니다. 바로 제가 <strong>사전에 동의한 사람</strong>의 데이터만 추출하겠다고 한 것이었죠!</p><p>그래서 사전에 동의한 사람을 구분할 방법이 필요했습니다. 다행히도 Discord 서버에는 그런 구분을 쉽게 해주는 도구가 존재했죠. 바로 역할입니다. 역할을 새로 만들어서 그 역할을 갖고 있는 사람에 대한 데이터만 추출하도록 하면 제가 원하는 대로 할 수 있어 보입니다.</p><p>그리하여 서버에 디스코드 봇이 처음 입장하게 되면 ‘피실험체’라는 역할을 하나 만들어 두기로 하였습니다. 그리고 봇이 꺼진 동안 그 역할이 사라지게 되면 추후 봇이 다시 작동할 때 역할을 다시 만들어 주도록 구현하였습니다. 근데 지금 생각해보니까 봇이 켜져 있는 동안 역할이 삭제되는 경우에 대해서는 예외 처리를 안해놨네요… 추후 할 일에 적어놓아야겠습니다.</p><p>그러고나서는 그 역할을 스스로 받을 수 있도록 명령어를 만들자고 생각했습니다. 자세한 건 <a href="https://discordjs.guide/creating-your-bot/command-handling.html">discord.js 공식 사이트</a>를 참고했습니다. 근데 제 생각에는 명령어만 만들어 놓으면 봇에서 명령어를 사용할 수 있을 것 같았습니다. 근데 그것이 아니라 따로 배포까지 해놔야 디스코드 서버에서 명령어를 사용할 수 있다고 합니다. 구현이 왜 이렇게 되어있는지는 살짝 의아하지만 무언가 기술적인 문제가 있지 않았나 싶습니다… 그것 때문에 시간을 1시간 정도 더 잡아먹었습니다. 이거에 대한 내용도 역시 <a href="https://discordjs.guide/creating-your-bot/command-deployment.html#command-registration">공식 사이트</a>를 참고했습니다.</p><h2 id="다음은…"><a href="#다음은…" class="headerlink" title="다음은…"></a>다음은…</h2><p>다음엔 진짜 VoiceStateUpdate에 따른 데이터 추출을 진행할 것입니다. 추가로 사용자가 역할을 삭제하거나 디스코드 봇이 정상 종료, 혹은 비정상 종료할 때에 대해서 데이터 추출이 어떻게 마무리 되어야 하는지 고민해보고 적절한 처리를 진행하도록 하겠습니다. 추후 설명하겠지만, 통화방 참여는 순간에 일어나는 사건이 아니라 지속적으로 기간을 갖고 일어나는 사건이므로 이러한 예외 처리가 필요한 것 같습니다. 그럼 다음에 뵙겠습니다. 좋은 하루 되세요~!</p>]]></content:encoded>
      
      
      <category domain="http://rasauq1122.github.io/categories/development/">development</category>
      
      
      <category domain="http://rasauq1122.github.io/tags/project/">project</category>
      
      <category domain="http://rasauq1122.github.io/tags/development/">development</category>
      
      <category domain="http://rasauq1122.github.io/tags/hhj/">hhj</category>
      
      
      <comments>http://rasauq1122.github.io/2023/02/06/HHJ-2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>프로젝트 &#39;홍합찜&#39; - 1</title>
      <link>http://rasauq1122.github.io/2023/02/04/HHJ-1/</link>
      <guid>http://rasauq1122.github.io/2023/02/04/HHJ-1/</guid>
      <pubDate>Fri, 03 Feb 2023 16:21:41 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;들어가며&quot;&gt;&lt;a href=&quot;#들어가며&quot; class=&quot;headerlink&quot; title=&quot;들어가며&quot;&gt;&lt;/a&gt;들어가며&lt;/h2&gt;&lt;p&gt;안녕하세요. rasauq1122입니다.&lt;br&gt;2월 4일 ~ 5일은 가족여행으로 아마 포스팅을 못 쓸 것 같습니다</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="들어가며"><a href="#들어가며" class="headerlink" title="들어가며"></a>들어가며</h2><p>안녕하세요. rasauq1122입니다.<br>2월 4일 ~ 5일은 가족여행으로 아마 포스팅을 못 쓸 것 같습니다. 포스팅을 읽는 분은 없으시겠지만 그때까지 안녕히 계세요. 그럼 바로 오늘 프로젝트에서 어떤 작업을 했는지 말씀드리겠습니다.</p><h2 id="오늘은…"><a href="#오늘은…" class="headerlink" title="오늘은…"></a>오늘은…</h2><p>원래 어제 예고한대로 Discord.js에서 지원하는 VoiceStateUpdate에 대한 event Listener를 만드려고 했습니다. 근데 생각해보니까 그런 생각이 들더라구요. 이상적인 상황에서는 봇이 아마 꺼지지 않고 24시간 365일 잘 작동하겠지만, 현실에서는 무언가 서버 에러라든지 다양한 이유로 작동이 도중에 중단되면 문제가 발생하지 않을까 싶었습니다.</p><p>일단 제가 생각한 테이블은 다음과 같습니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+-------------+-----------+------+-----+---------+-------+</span><br><span class="line">| Field       | Type      | Null | Key | Default | Extra |</span><br><span class="line">+-------------+-----------+------+-----+---------+-------+</span><br><span class="line">| guild       | bigint    | NO   | PRI | NULL    |       |</span><br><span class="line">| user        | bigint    | NO   | PRI | NULL    |       |</span><br><span class="line">| date        | timestamp | NO   | PRI | NULL    |       |</span><br><span class="line">| prevChannel | bigint    | YES  |     | NULL    |       |</span><br><span class="line">| nextChannel | bigint    | YES  |     | NULL    |       |</span><br><span class="line">+-------------+-----------+------+-----+---------+-------+</span><br></pre></td></tr></table></figure><p>이런식으로 테이블은 구성해서 디스코드 서버 내에서 사용자가 음성 채팅방을 옮길 때마다 테이블에 데이터를 추가할 예정이었습니다. 근데 이때, 서버(디스코드 봇)가 알 수 없는 이유로 뻗어버리고 다음과 같은 데이터가 있다고 칩시다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+-------+------+---------------------+-------------+-------------+</span><br><span class="line">| guild | user | date                | prevChannel | nextChannel |</span><br><span class="line">+-------+------+---------------------+-------------+-------------+</span><br><span class="line">|     1 |    1 | 2023-02-04 01:35:01 |        NULL |           1 |</span><br><span class="line">+-------+------+---------------------+-------------+-------------+</span><br></pre></td></tr></table></figure><p>이러면 더 이상 데이터베이스에서 update가 일어나지 않으므로, 추후 계산 과정에서 봇이 꺼져있는 동안, 계속 음성 채팅방에 들어와 있는 사용자로 인식하게 될 것 입니다. 그리고 혹시나 봇이 꺼진 후에 나갔다가 다시 들어오면, 음성 채팅방에서 나간 적도 없는 사용자가 들어오기만을 2번이나 한 판정으로 인식될 겁니다. 이는 추후 계산 과정에서 큰 문제가 있을 것입니다.</p><p>따라서 서버가 뜬금없이 꺼지는 예상치 못한 상황에 대비하여, 정상적인 상황에서 서버가 꺼질 때 매번 기록하면 좋을 것 같다고 생각했습니다. 서버가 켜질 때 서버가 정상적으로 꺼지지 않았다면 기록이 남지 않을테니 그걸 보고 추후 문제가 있는 데이터를 수정하면 된다는 생각으로요!</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+-----------+----------+------+-----+---------+-------+</span><br><span class="line">| Field     | Type     | Null | Key | Default | Extra |</span><br><span class="line">+-----------+----------+------+-----+---------+-------+</span><br><span class="line">| guild     | bigint   | NO   | PRI | NULL    |       |</span><br><span class="line">| startTime | datetime | NO   | PRI | NULL    |       |</span><br><span class="line">| endTime   | datetime | YES  |     | NULL    |       |</span><br><span class="line">+-----------+----------+------+-----+---------+-------+</span><br></pre></td></tr></table></figure><p>그래서 위와 같은 테이블을 추가로 만들어 서버가 정상적으로 꺼질 때 endTime을 기록하게 하였습니다. 나중에 endTime이 없는 데이터가 발견되면 그에 따른 후처리를 할 수 있도록 말이죠.</p><h2 id="다음은…"><a href="#다음은…" class="headerlink" title="다음은…"></a>다음은…</h2><p>그럼 다음에는 진짜 VoiceStateUpdate에 대한 event Listener를 만들고, 추가적으로 봇 구동시 endTime이 없는 데이터가 발견될 때 후처리를 하도록 코드를 작성해둘 예정입니다. 그럼 이만 포스팅을 마치겠습니다. 좋은 하루 되세요~!</p>]]></content:encoded>
      
      
      <category domain="http://rasauq1122.github.io/categories/development/">development</category>
      
      
      <category domain="http://rasauq1122.github.io/tags/project/">project</category>
      
      <category domain="http://rasauq1122.github.io/tags/development/">development</category>
      
      <category domain="http://rasauq1122.github.io/tags/hhj/">hhj</category>
      
      
      <comments>http://rasauq1122.github.io/2023/02/04/HHJ-1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>프로젝트 &#39;홍합찜&#39; - 0</title>
      <link>http://rasauq1122.github.io/2023/02/03/HHJ-0/</link>
      <guid>http://rasauq1122.github.io/2023/02/03/HHJ-0/</guid>
      <pubDate>Thu, 02 Feb 2023 17:47:20 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;개요&quot;&gt;&lt;a href=&quot;#개요&quot; class=&quot;headerlink&quot; title=&quot;개요&quot;&gt;&lt;/a&gt;개요&lt;/h2&gt;&lt;p&gt;안녕하세요. rasauq1122입니다.&lt;br&gt;오늘은 제가 진행하고자 하는 프로젝트에 대해서 소개하는 글을 작성해볼까 합니다.&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><p>안녕하세요. rasauq1122입니다.<br>오늘은 제가 진행하고자 하는 프로젝트에 대해서 소개하는 글을 작성해볼까 합니다.</p><h2 id="계기"><a href="#계기" class="headerlink" title="계기"></a>계기</h2><p>저는 제 개인시간의 대부분을 디스코드에서 보내는 편입니다. 장시간 디스코드를 이용하다 보면 디스코드에서 보낸 시간을 확인할 수 있는 통계창 같은 게 있으면 좋을 것 같다는 생각이 듭니다. 이왕이면 저 뿐만 아니라 디스코드 서버에 있는 다른 친구들에게도요.</p><p>그래서 저는 친구들에게 ‘방송국에서 연말에 시상식하는 것처럼, 디스코드 서버 내에서도 시상식 같은 것을 하면 재미있을 것 같다.’고 상습적으로 얘기를 하곤 했습니다. 하지만 막상 시작하려고 하면 너무 귀찮아서 늘 포기만 하다가 이번에 하나 만들어볼까 합니다.</p><p>디스코드 서버 이름이 ‘홍합탕’이라, 이 프로젝트 이름은 일단 대충 ‘홍합찜’으로 지어봤습니다.</p><h2 id="기능"><a href="#기능" class="headerlink" title="기능"></a>기능</h2><p>일단 디스코드 봇을 활용해서 디스코드 서버에서 일어나는 ‘음성 채팅방 접속 내역’과 ‘메시지 송신 내역’을 수집합니다. 수집한 데이터는 데이터베이스에 저장하고, 웹을 통해서 수집한 데이터를 시각적으로 되도록이면 예쁘게 표현하는 것이 목표입니다.</p><p>웹의 접근 권한을 디스코드 로그인 API 같은 걸 활용해서 디스코드 서버에 있는 사람만 확인을 할 수 있게끔 할 수 있으면 좋을 것 같습니다. 또한 ‘마이페이지’ 같은 것도 만들 수 있으면 좋겠네요.</p><p>가장 중요한 것은 저장한 데이터로부터 어떤 정보를 추출할 것인가에 대한 부분인 것 같습니다. 단순하게는 ‘가장 오래 디스코드 통화방에 참가한 사람’이 있을 수 있겠습니다. 너무 단순하면 재미가 없을 것 같으니, 참신하면서도 한번쯤 궁금해봤을 만한 수상항목이 필요해 보입니다.</p><h2 id="지금까지는…"><a href="#지금까지는…" class="headerlink" title="지금까지는…"></a>지금까지는…</h2><p>지금은 discord.js를 통해서 아무 기능이 없는 디스코드 봇을 하나 만들어 놓은 상태입니다. 봇을 작동시키면 디스코드 서버에 온라인으로 표시만 되는 정도입니다. 데이터베이스는 mysql을 사용할 예정입니다. 오늘은 mysql 비밀번호를 까먹어버려서 새로 비밀번호를 세팅하는 작업까지만 했습니다 ㅎㅎ;</p><h2 id="내일은…"><a href="#내일은…" class="headerlink" title="내일은…"></a>내일은…</h2><p>내일은 디스코드 봇을 작동시키면 데이터베이스에 실제로 수집할 수 있도록 코드를 짜볼 예정입니다. 추가로 AWS를 이용해서 봇을 항상 깨어 있게 할 수 있으면 좋겠네요. 이만 글을 마치겠습니다. 좋은 하루 되세요.</p>]]></content:encoded>
      
      
      <category domain="http://rasauq1122.github.io/categories/development/">development</category>
      
      
      <category domain="http://rasauq1122.github.io/tags/project/">project</category>
      
      <category domain="http://rasauq1122.github.io/tags/development/">development</category>
      
      <category domain="http://rasauq1122.github.io/tags/hhj/">hhj</category>
      
      
      <comments>http://rasauq1122.github.io/2023/02/03/HHJ-0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>여담</title>
      <link>http://rasauq1122.github.io/2023/02/01/small_talk/</link>
      <guid>http://rasauq1122.github.io/2023/02/01/small_talk/</guid>
      <pubDate>Wed, 01 Feb 2023 10:58:13 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;안녕하세요. rasauq1122입니다.&lt;/p&gt;
&lt;p&gt;최근 제 포스팅은 대부분 책에 관련된 내용이 전부입니다. 책에 대한 포스팅만 올리고 싶은 건 아니지만 어쩔 수 없이 이렇게 되어버리는 것 같습니다. 전 집 밖에 잘 나가지 않는 편이라 오늘 제가</description>
        
      
      
      
      <content:encoded><![CDATA[<p>안녕하세요. rasauq1122입니다.</p><p>최근 제 포스팅은 대부분 책에 관련된 내용이 전부입니다. 책에 대한 포스팅만 올리고 싶은 건 아니지만 어쩔 수 없이 이렇게 되어버리는 것 같습니다. 전 집 밖에 잘 나가지 않는 편이라 오늘 제가 읽은 책이 제가 했던 의미있는 활동의 전부거든요.</p><p>근데 문제가 발생했습니다. 처음에는 책 내용 정리하는 글을 쓰면서 제 뇌도 착착 정리되는 기분이라 조금 뿌듯했는데, 이제와서는 그냥 맨날 멍때리다가 가끔 정신차려서 책에 있는 내용 그대로 타이핑하는 무지성 거인이 되어버린 것만 같았습니다. </p><p>그래서 다른 무언가 재밌는 포스팅 거리가 없나 생각을 해보았습니다. 예전 블로그에는 주로 백준 문제 푼 거 아주 간단하게 리뷰하는 거랑, 코드포스 리뷰한 거 위주로만 올렸습니다. 그 외에 내용은 전혀 없었죠. 갑자기 생각난 건데 과거의 저를 돌이켜 볼 때면 정말 열심히 살았다는 인상을 받습니다. 문제를 하루에 5개씩 풀고 코드포스까지 한다니! 정말 괴물이 아닐 수가 없습니다.</p><p>지금 저는 평범한 민간인에 불과하기 때문에 그런 거는 좀 어려울 것 같습니다. 가끔 코드포스를 돌리긴 하지만, 요즘은 오버워치 시즌 말이라 코드포스가 주로 진행되는 11시 밤이면 저는 친구들과 함께 빠른 대전을 열심히 돌리고 있거든요. </p><p>게임 얘기 하다가 생각난 건데, 보드게임 리뷰 같은 것도 포스팅으로 작성하면 괜찮을 것 같아요. 제가 아는 보드게임에 대해서 룰 설명이나 리뷰를 진행하다가 나중에는 저도 처음보는 보드 게임에 대해서 리뷰하는 것이죠. 요즘 보드게임 카페 가면 늘 하던 것만 해서 살짝 매너리즘에 빠져 있었는데 빠져 나올 좋은 찬스인 것 같네요.</p><p>그리고는 프로젝트 같은 것도 포스팅으로 작성해보면서 진행하면 좋을 것 같네요. TIL(Today I Learn)이라든지, 어떤 식으로 할 지에 대한 구상이라든지? 그런 내용이 담기면 좋을 것 같네요. 또 이런 식으로 포스팅을 쓰면서 ‘나 이런 프로젝트 구상 중에 있고 꼭 만들 거야.’라고 포스팅으로 박제해서 귀차니즘을 이기고 프로젝트를 실행에 옮길 수 있다는 장점도 예상되네요.</p><p>그런 프로젝트들이 과연 제 진로(취업?)에 도움이 될까 싶기도 한데, 아무것도 안한 것 보다야 나을 것 같으니 좀 진행해보고 싶은 욕구가 있습니다. 실제로 하나 생각하기만 한 내용이 있어서 언젠가는 그걸 소개하는 포스팅을 작성해보도록 하겠습니다. 물론 다 귀찮으면 이런 식으로 그냥 ‘여담’으로 떼울 수 있고요. 참 편리합니다.</p><p>이러니 저러니 해도 결국 포스팅할 내용이 없으면 책 리뷰로 돌아올 것 같네요. 아무 것도 안 쓰는 것보다 이렇게 뭐라도 주저리주저리 써놓는 게 좋아 보여서 오늘도 뻘소리만 적다가 글 마칩니다. 고생하세요~!</p>]]></content:encoded>
      
      
      <category domain="http://rasauq1122.github.io/categories/small-talk/">small_talk</category>
      
      
      
      <comments>http://rasauq1122.github.io/2023/02/01/small_talk/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>인스타브레인 - 3</title>
      <link>http://rasauq1122.github.io/2023/01/31/InstaBrain-3/</link>
      <guid>http://rasauq1122.github.io/2023/01/31/InstaBrain-3/</guid>
      <pubDate>Tue, 31 Jan 2023 09:18:39 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;집중력을-빼앗긴-시대-똑똑한-뇌-사용법&quot;&gt;&lt;a href=&quot;#집중력을-빼앗긴-시대-똑똑한-뇌-사용법&quot; class=&quot;headerlink&quot; title=&quot;집중력을 빼앗긴 시대, 똑똑한 뇌 사용법&quot;&gt;&lt;/a&gt;집중력을 빼앗긴 시대, 똑똑한 뇌 사용법</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="집중력을-빼앗긴-시대-똑똑한-뇌-사용법"><a href="#집중력을-빼앗긴-시대-똑똑한-뇌-사용법" class="headerlink" title="집중력을 빼앗긴 시대, 똑똑한 뇌 사용법"></a>집중력을 빼앗긴 시대, 똑똑한 뇌 사용법</h2><hr><h3 id="멀티태스킹과-집중력"><a href="#멀티태스킹과-집중력" class="headerlink" title="멀티태스킹과 집중력"></a>멀티태스킹과 집중력</h3><blockquote><p>멀티태스킹을 하는 사람은 집중력이 더 낮았다. 훨씬 집중을 못했다.<br>특히 중요하지 않은 정보를 걸러내는 실험에서 제대로 필터링을 하지 못했다.</p><footer><strong>인스타브레인</strong><cite>안데르스 한센</cite></footer></blockquote><p>『인스타브레인』에서 말하는 디지털 생활 방식이란 여러 가지 일을 한꺼번에 하려고 하는 것, 즉 멀티태스킹을 의미한다고 합니다. 멀티태스킹에 관한 연구에 참여한 피실험자를 대상으로 설문조사를 진행한 결과, 절반은 공부하면서 서로 다른 인터넷을 서핑하는 데 전혀 문제가 없다고 답했다고 합니다. </p><p>그러나 실험 결과는 달랐습니다. 멀티태스킹을 하는 쪽이 그렇지 않은 쪽 보다 집중력이 더 낮았습니다. 심지어는 한 작업에서 다른 작업으로 빠르게 옮겨가는 능력, 즉 멀티태스킹 능력조차 한 번에 하나씩의 일을 수행하는 것을 선호하는 집단에 비해 뒤쳐졌습니다! 그들이 잘한다고 믿어 의심치 않던 멀티태스킹에서조차 능력이 떨어졌던 것이죠.</p><p>이처럼 멀티태스킹은 우리 뇌를 효율적으로 작동하는 것을 방해하는 것처럼 보입니다. 그렇다면 뇌는 우리가 멀티태스킹을 할 때 그것을 하지 못하도록 막아야 하는 거 아닐까요? 오히려 그 반대였습니다. 뇌는 멀티태스킹할 때 도파민을 분비한다고 합니다. 어째서 이런 일이 일어나는 것일까요? 늘 그렇듯 우리 뇌가 원시시대부터 어떻게 진화해왔는지에 대해 잘 생각해보면 됩니다. </p><p>우리 선조들은 주변의 상상할 수 있는 모든 자극에 빠르게 대응하기 위해 항상 주변을 경계해야 했기 때문입니다. 이것도 일종의 화재경보 원칙인 셈이죠. 따라서 뇌는 여기에 맞춰서 진화했고, 그 결과 멀티태스킹을 수행하면 도파민을 분비하여 보상을 제공하는 것이죠.</p><hr><h3 id="멀티태스킹과-작업-기억"><a href="#멀티태스킹과-작업-기억" class="headerlink" title="멀티태스킹과 작업 기억"></a>멀티태스킹과 작업 기억</h3><blockquote><p>멀티태스킹은 단순히 집중력이 떨어지는 것만을 의미하지 않는다. 우리가 하는 일을 머릿속에 정확히 간직하는 ‘정신적인 작업대’인 작업 기억(working memory)도 마찬가지로 약화된다.</p><footer><strong>인스타브레인</strong><cite>안데르스 한센</cite></footer></blockquote><p>『인스타브레인』은 위 주장을 뒷받침하는 근거로 실험을 하나 제시했습니다. 10대 150명을 대상으로 집중력을 분산시키는 다른 정보와 함께 짧은 시간만 표시되는 문장을 보여주고 다시 문장을 완성하게 하는 실험입니다. 답을 맞히려면 작업 기억이 좋아야만 했는데, 멀티태스킹을 한 사람들의 정답률이 더 낮았고 이들의 작업 기억은 다른 사람들보다도 떨어졌다고 합니다.</p><hr><h3 id="멀티태스킹과-휴대전화"><a href="#멀티태스킹과-휴대전화" class="headerlink" title="멀티태스킹과 휴대전화"></a>멀티태스킹과 휴대전화</h3><blockquote><p>(…) 휴대전화는 우리의 주의를 끄는 데 탁월한 능력이 있으며,<br>이러한 능력은 휴대전화를 주머니에 넣는 것만으로는 멈출 수 없다. </p><footer><strong>인스타브레인</strong><cite>안데르스 한센</cite></footer></blockquote><p>뇌는 휴대전화를 주머니에 넣어두고 있더라도 무의식적으로 휴대전화의 매력을 인식하고 있기 때문에, 이를 무시하게 위해 정신적 대역폭을 사용하게 됩니다. 그에 따라서 집중력이 제 기능을 발휘하지 못하게 됩니다. 휴대전화가 하루에도 수백 번 도파민을 분비하게 하니 그다지 이상한 일도 아닌 것처럼 보입니다.</p><p>혹자는 휴대전화와 같은 거센 정보의 범람이 오히려 집중력 훈련을 시켜주고, 주의가 분산되기는 하지만 결국에 적응하고 잘 이겨낼 수 있지 않을까 생각하실지 모르겠습니다. 하지만 『인스타브레인』은 뇌는 자극을 주면 더 강해지는 근육과 달라서, 집중력을 방해하는 요소가 많아지면 많아질수록 오히려 주의가 더 산만해진다고 합니다.</p><p>이와 관련된 많은 실험이 『인스타브레인』에 수록되어 있습니다. 모든 실험을 다루기엔 포스팅이 너무 길어질테니 딱 한 가지만 들도록 하겠습니다. 바로 ‘펜과 키보드’에 관한 실험입니다. </p><p>미국의 연구자가 몇몇 학생들이 강연을 듣는 동안 일부는 종이와 펜으로 내용을 정리하게 하고, 나머지는 컴퓨터로 정리하라고 지시했다고 합니다. 그리고 종이에 적은 사람들이 강연 내용을 더 잘 이해한 것으로 나타났다고 합니다. 컴퓨터로 SNS와 같은 활동을 하면서 강의를 들은 것도 아닌데 이러한 결과가 나온 게 조금 신기하실 수도 있습니다. 연구자의 추론에 따르면 키보드는 들리는 단어를 그냥 받아 적기만 하면 되지만, 펜으로 필기할 경우 키보드처럼 빠르게 적을 수 없기 때문에 적어야 하는 내용의 우선순위를 따지게 된다고 합니다. </p><hr><h3 id="장기기억화"><a href="#장기기억화" class="headerlink" title="장기기억화"></a>장기기억화</h3><blockquote><p>전문 용어로 ‘강화(consolidation)’라고 부르는 새로운 장기 기억 형성은 뇌의 활동 중에서 가장 많은 에너지를 소모하는 과정 중 하나다.</p><footer><strong>인스타브레인</strong><cite>안데르스 한센</cite></footer></blockquote><p>강화의 첫 번째 단계는 우리가 뭔가에 집중하면서 뇌에 중요하다는 신호를 보내는 것입니다. 시끄러운 방에서 시험 준비를 하려고 하면 집중할 수 없으니 기억하기 어렵게 되고, 마찬가지로 열쇠를 어디에 뒀는지 기억하지 못하는 것은 당시에 집중하지 않고 다른 생각을 했기 때문입니다. 뇌에 중요하다는 신호가 전혀 가지 않았으니 기억을 하지 못하는 것이죠.</p><p>다음 단계는 작업 기억에 정보를 담아두는 것이죠. 우선 이렇게 해야 뇌는 강화를 통해 장기 기억으로 저장할 수 있다고 합니다. 하지만 인스타그램, 페이스북, 카카오톡 사이를 오가며 뇌에 끊임없이 뭔가를 쏟아부으면 입력된 내용을 기억으로 변환하는데 방해를 받게 됩니다. 우리의 작업 기억에는 한계가 있기 떄문에 정보가 너무 많으면 과부하에 걸려 새로운 장기 기억을 형성할 시간이 없어지게 됩니다.</p><p>뇌에는 ‘전환기’라는 것이 존재하여, 집중력을 온전히 회복하여 다시 집중하는 데까지 시간이 걸린다고 합니다. 이 때문에 메일이나 문자에 답하면서 공부하는 사람은 내용을 이해하는 데 더 많은 시간을 쏟아야 합니다. <strong>따라서 문자나 메일이 왔는지 확인하려고 계속 한눈 파는 것보다 1시간에 몇 분 정도를 따로 할애하는 게 좋다고 합니다.</strong></p><hr><h3 id="뇌와-지름길"><a href="#뇌와-지름길" class="headerlink" title="뇌와 지름길"></a>뇌와 지름길</h3><blockquote><p>(…) 따라서 뇌는 신체의 다른 부분과 마찬가지로 에너지 소모를 줄이면서 가능한 한 효율적으로 일을 처리하도록 설정 되어 있다. 즉, 뇌가 지름길을 선택한다는 뜻이다.</p><footer><strong>인스타브레인</strong><cite>안데르스 한센</cite></footer></blockquote><p>『인스타브레인』은 뇌가 지름길을 선택한다는 걸 보여주는 실험을 하나 소개합니다. 다양한 문장을 들려준 뒤 한 문장이 끝날 때마다 이를 컴퓨터에 적도록 합니다. 이때 일부에게는 컴퓨터가 정보를 저장할 것이라고 했고, 나머지에게는 컴퓨터에 적은 정보가 삭제될 거라고 알려주었다고 합니다. 모든 문장을 컴퓨터에 적은 후 기억이 나는 만큼 말해보게 하자, 컴퓨터가 정보를 저장한다고 들었던 쪽이 그렇지 않은 쪽보다 기억하는 문장 수가 더 적었다고 합니다. </p><p>어차피 컴퓨터에 저장될 텐데 뭐 하러 에너지를 낭비하느냐는 식인 것입니다. 정보가 저장된다고 하면, 정보 자체보다 저장되는 장소를 기억하는 것이 당연히 쉽기 때문입니다. 이런 현상을 ‘구글 효과’ 혹은 ‘디지털 기억상실증’이라고 말합니다.</p><p>디지털 기억상실증이라고 하지만, 실제로 구글이나 위키피디아에 접속만 하면 다 알 수 있는데 굳이 새로운 걸 배워야 하는 이유가 무엇인지 궁금합니다. 『인스타브레인』은 이에 대해서 다음과 같이 대답합니다.</p><blockquote><p>세상 속에서 어울려 살기 위해, 비판적인 질문을 던지기 위해, 정보의 가치를 평가하기 위해 우리에게는 지식이 필요하다. (…) 뇌의 강화 작업은 지식을 구축하기 위해서 정보를 개인적인 경험과 통합하는 과정을 일컫는다.</p><footer><strong>인스타브레인</strong><cite>안데르스 한센</cite></footer></blockquote>]]></content:encoded>
      
      
      
      
      <comments>http://rasauq1122.github.io/2023/01/31/InstaBrain-3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>가챠 중독은 일종의 도박 중독이 아닐까? 『인스타브레인』을 읽고</title>
      <link>http://rasauq1122.github.io/2023/01/30/%EC%9D%B8%EC%8A%A4%ED%83%80%EB%B8%8C%EB%A0%88%EC%9D%B8%EC%9D%84-%EC%9D%BD%EA%B3%A0/</link>
      <guid>http://rasauq1122.github.io/2023/01/30/%EC%9D%B8%EC%8A%A4%ED%83%80%EB%B8%8C%EB%A0%88%EC%9D%B8%EC%9D%84-%EC%9D%BD%EA%B3%A0/</guid>
      <pubDate>Mon, 30 Jan 2023 08:31:10 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;들어가며&quot;&gt;&lt;a href=&quot;#들어가며&quot; class=&quot;headerlink&quot; title=&quot;들어가며&quot;&gt;&lt;/a&gt;들어가며&lt;/h2&gt;&lt;p&gt;안녕하세요. rasauq1122입니다.&lt;br&gt;오늘은 『인스타브레인』 내용 정리를 잠시 쉬어 가고, 책을 읽으면서</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="들어가며"><a href="#들어가며" class="headerlink" title="들어가며"></a>들어가며</h2><p>안녕하세요. rasauq1122입니다.<br>오늘은 『인스타브레인』 내용 정리를 잠시 쉬어 가고, 책을 읽으면서 들었던 생각을 간단히 정리할 겸 포스팅을 작성해볼까 합니다. 원래는 <a href="https://rasauq1122.github.io/2023/01/29/%EC%9D%B8%EC%8A%A4%ED%83%80%EB%B8%8C%EB%A0%88%EC%9D%B8-2">어제 썼던 포스팅</a>에서 작성할까도 했는데, 쓰다 보니 내용이 좀 길어지는 것 같아서 따로 포스팅을 분리하여 작성하게 되었습니다.</p><h2 id="도파민"><a href="#도파민" class="headerlink" title="도파민"></a>도파민</h2><p>도파민(Dopamine)은 뇌의 전달 물질 중 하나로, 『인스타브레인』에 따르면 어디에 집중해야 할지 선택하게 만드는 역할을 한다고 합니다. 우리가 배고플 때 음식을 보면 먹고 싶은 이유가 바로 지난 수만년동안 생존을 위해 진화해온 우리의 뇌가 도파민 수치를 끌어올리기 때문입니다. </p><p>오늘날 아마 이 글을 읽을 수 있으신 분들은 꽤나 풍족한 환경에서 살고 있을 것이라 추측됩니다. 아마 핸드폰에 배달 음식 어플이 하나쯤은 깔려있을 것이고, 거기서 메뉴를 뒤적이시다 보면 아마 뱃 속에서 꼬르륵 소리가 날 겁니다. 이처럼 원시 사회에 비하면 오늘날 우리가 살고 있는 이 세계는 음식이 조금 과장하면 사방천지에 깔려있다고 말할 수 있습니다. </p><p>사방천지에 깔려있는 음식들을 볼 때마다 솟구치는 도파민 수치에 순응하여 보이는 음식을 모두 먹어 치운다면 당뇨와 비만, 각종 성인병에 취약해지고 말 것입니다. 하루하루 먹고 살기 위해서 수렵·채집 활동을 해야만 했고 굶어죽는 인구 수가 상당했던 원시 사회에서는 도움이 되는 특성인 게 분명해 보입니다. 그러나 비교적 풍족한 오늘날은 이러한 특성이 오히려 우리 건강을 위협하고 매년마다 ‘올해에는 꼭 다이어트 해야지!’라고 결심하게 만드는 것이죠.</p><h2 id="도박이-짜릿한-이유"><a href="#도박이-짜릿한-이유" class="headerlink" title="도박이 짜릿한 이유"></a>도박이 짜릿한 이유</h2><p>연예인들이 불법 도박을 했다는 내용으로 뉴스에 나오는 걸 보면 신기하다는 생각이 듭니다. 연예인의 삶을 잘 모르는 소시민인 저로써는 돈도 많고 즐거운 일도 많을 것 같은 연예인들이 굳이 그렇게 위험한 불법 도박에 손을 댄 이유가 무엇일까 싶습니다. 이렇게 갖을 수 있는 것들은 전부 다 갖은 것 같은 연예인들마저 도박에 손을 대고 쉽게 빠져 나올 수 없는 이유는 무엇일까요? 역시 도파민 때문입니다. </p><p>『인스타브레인』을 읽으면서 가장 신기했던 내용 중 하나는 바로 새로운 경험 그 자체에 대한 것보다도 새로운 경험에 대한 ‘기대감’이 더 도파민 수치를 높인다는 것이었습니다. 이와 관련된 몇 가지 실험 사례를 『인스타브레인』에서 소개해주는데, 쥐나 원숭이 뿐만 아니라 인간도 어떤 보상을 확실히 받을 수 있을 때 보다도 보상을 받을 수 있을지 없을지 불확실할 때 도파민 수치가 더 높았다고 합니다.</p><p>그리고 도박만큼 불확실한 결과를 갖는 것의 대명사로 쓰이기에 적절한 건 또 없을 것이라는 주장에 여러분들도 충분히 공감하리라 생각합니다. 『인스타브레인』은 도박만큼이나 SNS도 ‘불확실성’을 이용하여 도파민 수치를 높이다고 설명하며, SNS이 얼마나 중독되기 쉽고 위험한지에 대한 내용을 시사합니다. 하지만 저는 이 부분을 읽으면서 다른 걸 떠올렸습니다. 바로 가챠겜입니다.</p><h2 id="가챠-중독"><a href="#가챠-중독" class="headerlink" title="가챠 중독"></a>가챠 중독</h2><p>가챠겜은 가챠와 게임의 합성어로, 가챠는 ‘뽑기’ 정도로 해석하시면 됩니다. 가챠겜은 뽑기를 통해 확률형 아이템을 얻고, 그 아이템을 바탕으로 플레이 하게 되는 게임을 말합니다. 저는 이런 가챠겜에 대해서 꽤나 회의적인 입장입니다. 기존에 존재했던 게임에 확률형 아이템을 추가해서 만들었다는 생각에 게임성 자체가 뛰어나지 못하다고 보고, 요즘 나오는 모바일 게임은 전부 다 저련 종류의 게임 뿐인 것 같다는 생각에 드는 반발심 때문입니다. </p><p>유튜버나 스트리머가 진행하는 가챠 게임 방송을 봐도, 게임 자체에 대한 내용이 주가 되기 보다는 뽑기를 돌리며 낮은 확률로 등장하는 아이템 중에서도 좋은 성능의 아이템을 나오기 기대하고 결과에 따라 희노애락을 겪는 모습이 주가 되는 것 같습니다. 수익성도 뛰어나고 만들기도 쉬운 (물론 제 생각에) 가챠겜을 포기하는 건 게임사 입장에서 말이 안되는 건 알겠지만, 새롭고 신선한 게임을 즐기고 싶은 저에게 있어서는 슬프고 씁쓸한 일이 아닐 수 없습니다.</p><p>그러다가 갑자기 그런 생각이 들었습니다. ‘도박 규제 처럼 가챠도 규제해야 하는 것이 아닌가?’ 제 생각엔 도박이 중독되기 쉬운 것 만큼이나 가챠도 중독되기 쉬운 것 같습니다. 둘 다 ‘기대감이 도파민 수치를 더 높인다.’라는 점을 이용한 사업인 것 같기 때문입니다. 가챠를 규제하지 말아야 할 이유에 대한 반박은 도박을 규제해야 하는 이유로 전부 반박 가능한 것처럼 보입니다.</p><p>물론 저 또한 그렇게 규제하는 것이 좀 너무한 처사처럼 보입니다. 도박은 ‘돈을 얻기 위해’ 하는 것이 목적이지만, 가챠 같은 경우는 아이템 현금화를 제외하면 어찌 됐든 ‘자기 만족을 얻기 위해’ 하는 것이기 때문입니다. 어쩌면 가챠는 도박에 비유하는 것 보다 술, 담배에 비유하는 것이 더 적절한 것 같습니다. </p><p>그렇다면 저는 가챠도 술, 담배에 준하는 규정이 있어야 한다고 생각합니다. ‘만 19세 이상만 가챠를 돌릴 수 있게 해야 한다.’라는 주장이 아닙니다. 제가 생각하는 규정은 담뱃갑에 그려져 있는 ‘당신의 폐가 이렇게 썩어버릴지도?’와 같은 문구처럼, 가챠에 중독될 수 있다는 위험성을 시사하는 문구가 게임 내에 의무적으로 포함해야 한다고 생각합니다. 어떤 아이템이 몇 퍼센트의 확률로 나오는 지에 대한 ‘확률형 아이템 확률 공개’또한 꼭 필요합니다. 그리고 청소년들 대상으로 술과 담배가 위험하고 좋지 않다는 내용을 교육하는 것처럼 가챠도 그와 같은 교육이 필요하다고 생각합니다.</p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>물론 이건 저의 생각일 뿐이고, 다른 의견도 있을 수 있다는 건 인정하며 모두 존중합니다. 또 도파민에 대해서 너무 나쁘게만 묘사한 것 같아 첨언하자면, 『인스타브레인』을 읽어보시면, 도파민은 우리의 의욕을 담당하기 때문에 꼭 필요한 물질이라는 걸 아실 수 있습니다. 좋은 책이니 다들 읽어보셨으면 좋겠네요.</p><p>내일부터는 다시 『인스타브레인』에 대한 내용 정리 포스팅으로 찾아 뵙겠습니다. 긴 글 읽어주셔서 감사합니다!</p>]]></content:encoded>
      
      
      <category domain="http://rasauq1122.github.io/categories/small-talk/">small_talk</category>
      
      <category domain="http://rasauq1122.github.io/categories/small-talk/book/">book</category>
      
      
      <category domain="http://rasauq1122.github.io/tags/%EC%9D%B8%EC%8A%A4%ED%83%80%EB%B8%8C%EB%A0%88%EC%9D%B8/">인스타브레인</category>
      
      
      <comments>http://rasauq1122.github.io/2023/01/30/%EC%9D%B8%EC%8A%A4%ED%83%80%EB%B8%8C%EB%A0%88%EC%9D%B8%EC%9D%84-%EC%9D%BD%EA%B3%A0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>인스타브레인 - 2</title>
      <link>http://rasauq1122.github.io/2023/01/29/%EC%9D%B8%EC%8A%A4%ED%83%80%EB%B8%8C%EB%A0%88%EC%9D%B8-2/</link>
      <guid>http://rasauq1122.github.io/2023/01/29/%EC%9D%B8%EC%8A%A4%ED%83%80%EB%B8%8C%EB%A0%88%EC%9D%B8-2/</guid>
      <pubDate>Sun, 29 Jan 2023 06:58:23 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;몸이-되어버린-신종-모르핀-휴대전화&quot;&gt;&lt;a href=&quot;#몸이-되어버린-신종-모르핀-휴대전화&quot; class=&quot;headerlink&quot; title=&quot;몸이 되어버린 신종 모르핀, 휴대전화&quot;&gt;&lt;/a&gt;몸이 되어버린 신종 모르핀, 휴대전화&lt;/h2&gt;&lt;bl</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="몸이-되어버린-신종-모르핀-휴대전화"><a href="#몸이-되어버린-신종-모르핀-휴대전화" class="headerlink" title="몸이 되어버린 신종 모르핀, 휴대전화"></a>몸이 되어버린 신종 모르핀, 휴대전화</h2><blockquote><p>지금 휴대전화가 눈앞에 없다고 해도 어디에 있는지는 알고 있을 것이다. 나는 그렇게 확신한다. 왜냐하면 만약 휴대전화가 어디에 있는지 모른다면 지금 이 책에 집중하지 못할 테니까 말이다. </p><footer><strong>인스타브레인</strong><cite>안데르스 한센</cite></footer></blockquote><p>『인스타브레인』은 우리가 하루에 2600번 이상 휴대전화를 만지며, 깨어 있는 동안에는 평균 10분에 한 번씩 들여다 본다고 말합니다. 심지어 우리 중 40%는 휴대전화만 쓸 수 있다면 온종일 말 한마디 하지 못해도 괜찮다고 말한다고 합니다. 이처럼 휴대전화와 디스플레이는 전 세계를 사로잡았고, 이 현상을 이해하기 위해서는 우리의 뇌를 이해해야 할 필요가 있습니다.</p><p>뇌의 전달 물질 중 하나인 도파민는 보상 물질로 묘사하는데 이는 완전히 다 맞는 말은 아닙니다. 도파민의 가장 중요한 임무는 <strong>기분을 좋게 만드는 게 아니라 어디에 집중해야 할지 선택하게 만드는 것</strong>입니다. 예를 들어 배가 고플 때 차려놓은 음식을 보는 것만으로도 도파민 수치가 올라갑니다. 음식을 먹어서 도파민 수치가 증가하는 게 아니고 도파민 수치가 올라가서 음식을 먹고 싶게, 즉 음식에 집중하게 되는 것이죠. 참고로 음식을 먹고 나서 만족감을 느끼는 이유는 음식을 맛있다고 느끼게 만드는 엔도르핀 때문입니다.</p><p>이처럼 도파민은 뇌의 보상 시스템에서 중요한 역할을 하며, HPA축과 마찬가지로 수백만 년에 걸쳐 진화해왔습니다. 보상 시스템은 우리에게 다양한 행동을 취하게 하여 생존을 유리하게 하고 유전자를 후세에 물려주도록 만드는 것이죠. 도파민 수치를 높이는 건 음식, 다른 개체와의 교류, 성관계 뿐만 아니라 휴대전화도 포함됩니다. 문자 메시지가 오면 휴대전화를 들여다보고 싶은 강한 충동을 느끼는 이유가 바로 그것이죠.</p><blockquote><p>진화적인 관점에서 인간이 지식에 목말라하는 것은 이상할 게 없다.<br>주변 환경에 대해 더 많이 알아야 생존 가능성이 커지기 때문이다.</p><footer><strong>인스타브레인</strong><cite>안데르스 한센</cite></footer></blockquote><p>『인스타브레인』은 ‘주변 환경에 대해 더 많이 알수록 생존 확률이 높아진다.’의 결과로 자연은 우리에게 새로운 정보를 찾아 해매게 하는 본능을 심었고, 이러한 본능은 도파민에 의해서 작용된다고 말합니다. 따라서 우리는 무언가 새로운 것을 학습할 때 도파민이 분비되어 더욱 잘 학습될 수 있도록 만들어 주는 것이죠.</p><p>그리하여 우리가 지금 살고 있는 현대 사회에서 새로운 것에 대한 갈망은 컴퓨터와 휴대전화에 대한 갈망으로 이어지는 것입니다. 컴퓨터와 휴대전화로 새로운 페이지를 볼 때마다 뇌는 도파민을 분비하여 그 페이지를 클릭하게 만드는 것이죠.</p><p>한 가지 신기한 점이 있습니다. 뇌가 <strong>보상 시스템을 활성화시키는 것은 새로운 경험 그 자체보다는 오히려 이에 대한 기대감</strong>이라는 것이죠. 『인스타브레인』에서 이에 대해서 진행한 실험에 대해 설명해주고 있습니다. 쥐를 대상으로 지렛대를 누르면 음식이 나오는 실험을 했는데, 지렛대를 누를 때 음식이 나올 확률이 30~70%인 경우에 가장 절박하게 눌렀다고 합니다. 이와 비슷한 실험을 원숭이와 사람에 대해서도 진행했을 때도 결과는 같았다고 합니다. <strong>보상이 매번 주어지는 경우보다, 두 번에 한 번꼴로 보상이 주어질 때 도파민이 가장 많이 분비되었다는 것이죠.</strong> </p><blockquote><p>나무 아래에서는 과일이 보이지 않기 때문에 나무를 타고 올라가야만 하는데, 올라가 보니 열매가 없다고 한다. 그러면 계속해서 남은 다른 나무에도 올라가 찾아보는 게 중요하다. 꽝에도 포기하지 않는 자만이 언젠가는 칼로리가 풍부한 과일이라는 보상을 손에 넣을 수 있기 때문이다.</p><footer><strong>인스타브레인</strong><cite>안데르스 한센</cite></footer></blockquote><p>역시 원시 사회에서는 이러한 특성이 도움이 되었을 지는 모르겠지만, 오늘날에는 도박 중독 뿐만 아니라 SNS 중독으로도 이어질 수 있습니다. 불확실한 보상에 이끌려 슬롯머신이나 포커를 하게 되는 것과 같은 메커니즘으로, 문자 메시지의 알림음에 휴대전화를 집어들게 되는 것이죠. 어쩌면 중요한 내용일지도 모른다는 생각에 <strong>메일이나 문자 메시지를 읽었을 때보다 알림음을 들었을 때 도파민이 더 분비</strong>된다고 합니다.</p><p>『인스타브레인』은 ‘인스타그램’이나 ‘페이스북’과 같은 기업에서는 우리의 보상 시스템이 가장 활성화되었을 때 디지털 인증을 제공한다고 합니다. <strong>누군가 여러분의 사진에 ‘좋아요’를 누르자마자 게시물에 달리지 않고, 우리의 보상 시스템이 최대로 활성화될 때까지 엄지와 하트가 게시물 아래에 달리는 것을 보류한다고 합니다.</strong> 이처럼 많은 기업들이 뇌의 보상 시스템을 최대한 효율적으로 이용하기 위해 행동과학자와 신경과학자들을 고용해서 연구를 하고 있다고 합니다.</p>]]></content:encoded>
      
      
      <category domain="http://rasauq1122.github.io/categories/book/">book</category>
      
      
      <category domain="http://rasauq1122.github.io/tags/%EC%9D%B8%EC%8A%A4%ED%83%80%EB%B8%8C%EB%A0%88%EC%9D%B8/">인스타브레인</category>
      
      
      <comments>http://rasauq1122.github.io/2023/01/29/%EC%9D%B8%EC%8A%A4%ED%83%80%EB%B8%8C%EB%A0%88%EC%9D%B8-2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>인스타브레인 - 1</title>
      <link>http://rasauq1122.github.io/2023/01/28/%EC%9D%B8%EC%8A%A4%ED%83%80%EB%B8%8C%EB%A0%88%EC%9D%B8-1/</link>
      <guid>http://rasauq1122.github.io/2023/01/28/%EC%9D%B8%EC%8A%A4%ED%83%80%EB%B8%8C%EB%A0%88%EC%9D%B8-1/</guid>
      <pubDate>Sat, 28 Jan 2023 08:37:25 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;들어가며&quot;&gt;&lt;a href=&quot;#들어가며&quot; class=&quot;headerlink&quot; title=&quot;들어가며&quot;&gt;&lt;/a&gt;들어가며&lt;/h2&gt;&lt;p&gt;이 책을 읽게 된 계기는 제가 어제까지 리뷰를 작성하던 『역행자』라는 책에 있습니다. 그 책을 너무 감명깊게 읽</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="들어가며"><a href="#들어가며" class="headerlink" title="들어가며"></a>들어가며</h2><p>이 책을 읽게 된 계기는 제가 어제까지 리뷰를 작성하던 『역행자』라는 책에 있습니다. 그 책을 너무 감명깊게 읽은 나머지 『역행자』의 부록 쯤으로 달려 있는 추천 도서 리스트에 있는 책을 한 번 읽어보기로 결심했죠. 난이도 순으로 1단계에서 3단계까지 도서를 분류해놨는데, 원래 저는 『역행자』에서 많이 언급된 『클루지』라는 책을 읽어보려고 했습니다. 『클루지』는 3단계로 분류되었지만, 저는 메타인지에 실패하고 ‘나 정도는 이런 책 쯤이야 하나도 안 어렵지!’라고 생각해 리디셀렉트에 빌려서 읽기 시작했습니다.</p><p>그리고 그 결과는 참혹했습니다… 책 자체는 재미가 있는데 글을 이해하는 데 조금 어려웠어서 집중이 잘 안됐습니다. 이게 ‘『클루지』는 3단계로 분류된 책이니 어려울 거야.’라는 인지 편향일지도 모르지만, 어쨌든 다른 책을 읽기로 했습니다. 비슷한 주제지만 1단계로 분류되있는 『인스타브레인』이라는 책을 말이죠!</p><p>『인스타브레인』은 디지털 사회가 우리 뇌에 미치는 영향을 총 9장으로 다룬 책입니다. 『역행자』에서 말하는 ‘유전는 오작동’에 대해 좀 더 깊이 다룬 책이라고 할 수 있죠. 저는 이에 대한 내용을 제 입맛대로 정리하고 사견을 덧붙여 볼까 합니다.</p><h2 id="우리-뇌는-아직도-수렵-채집인이다"><a href="#우리-뇌는-아직도-수렵-채집인이다" class="headerlink" title="우리 뇌는 아직도 수렵 채집인이다."></a>우리 뇌는 아직도 수렵 채집인이다.</h2><p>진화는 나쁜 것도 좋은 것도 아니며 그저 세계에 적응하도록 만들어 줄 뿐입니다. 북극곰이 여타 다른 곰들과는 유별나게 하얀색 털을 갖게 된 이유도 마찬가지입니다. 들키지 않고 물개를 사냥하기 위해서는 갈색 털의 곰보다도 우연히 돌연변이가 발현되어 하얀색 털을 갖게 된 곰이 더 유리했을 것입니다. </p><p>마찬가지로 인간은 음식을 보면 도파민이 많이 분비되도록 진화했습니다. 이러한 특질이 현대 사회에서는 과체중과 당뇨를 유발할 수 있지만, 10만년전 수렵 사회에서는 생존에 굉장히 유리했기 때문입니다. 이에 대해서 『인스타브레인』은 ‘카린과 마리아’ 이야기로 예를 들었는데, 요약하자면 당시 인류는 15~20%가 굶어 죽었기 때문에 음식을 보면 도파민이 분비되도록 변이가 일어난 사람이 그렇지 않은 쪽보다 더 유리했다는 것입니다.</p><p>신체적인 부분에서만이 아니라 정신적인 부분에서도 이런 비슷한 문제가 발생합니다. 끊임없이 주변 환경을 살피고 과민하게 반응하는 것이 역시 수렵 사회에서는 생존에 유리했지만, 오늘날처럼 안전한 세계에서 산다면 이러한 특질은 정신적인 문제로 나타날 것입니다. 이러한 문제가 나타나는 이유는 <strong>인류가 주변 환경을 너무 빠른 시간에 괄목할 정도로 바꾸었기 때문</strong>입니다.</p><blockquote><p>감정은 기본적으로, 기린의 긴 목이나 북극곰 털 색깔과 다를 게 없는 생존 전략이다. </p><footer><strong>인스타브레인</strong><cite>안데르스 한센</cite></footer></blockquote><p>우리가 만약 샌드위치를 먹고자 할 때 샌드위치의 영양 성분이나 맛, 그걸 넘어서 내 몸의 깊은 곳에서부터 음식물을 원하고 있는지, 샌드위치가 이런 욕구를 채우는 데 최선인지 아닌지를 알 수 있다고 합시다. 그럼 그 모든 정보를 취합하여 샌드위치를 먹을지 말지 결정을 이성적으로 판단을 내릴 수 있을 겁니다. 하지만 실제로 우리가 샌드위치를 먹을 때 그런 심오한 고민을 하는 사람은 아마 드물 겁니다. 대체로 ‘먹고 싶어서’, 혹은 ‘배고파서’ 먹는 사람이 대다수일 겁니다. </p><p>이처럼 우리가 <strong>이성적인 판단을 내리기에 정보가 불충분하거나 결정하는 데 시간이 너무 오래 걸리면, 뇌가 빠르게 계산하여 감정이라는 형태로 답을 제시합니다.</strong> 또한 감정에는 일련의 신체 및 뇌 반응이 따라오며, 내장 기관뿐만 아니라 우리의 복잡한 사고 과정과 주변 환경을 이해하는 방식에도 영향을 미칩니다. 예를 들어 우리가 두려움을 느끼면, 뇌는 코르티솔과 아드레날린을 분비하도록 명령을 내려 심장이 좀 더 빠르고 강하게 뛰도록 만듭니다. 우리가 도망가거나 반격할 수 있도록 신체의 근육을 최대로 성능을 높이는 것입니다.</p><h2 id="우울증은-뇌의-보호-전략"><a href="#우울증은-뇌의-보호-전략" class="headerlink" title="우울증은 뇌의 보호 전략"></a>우울증은 뇌의 보호 전략</h2><blockquote><p>신체의 스트레스 대응 시스템, 즉 HPA축이 존재하는 이유는 우리에게 감정이 있는 것과 같은 이유다. 바로 생존을 위해서다. </p><footer><strong>인스타브레인</strong><cite>안데르스 한센</cite></footer></blockquote><p>HPA축은 모든 척추동물에게 찾아볼 수 잇는 스트레스 대응 시스템으로 시상하부(hypothalamus), 뇌하수체(pituitary gland), 부신(adrenal glands)의 앞글자를 따왔습니다. 간단히 설명하면, HPA축은 극도의 위험에 처했을 때 코르티솔이라는 호르몬을 분비하도록 요청하여 심장을 더욱 빠르고 강하게 뛰게 한다고 합니다. 이처럼 심박수를 높이는 이유는 맹수와 맞닥뜨린 상황에서 재빨리 대처하여 공격하거나 달아나야 하기 때문입니다. 앞서 말했듯 <strong>‘투쟁-도피 반응’</strong>을 보이는 것입니다.</p><p>현대 사회에서 목숨을 위협받은 일 때문에 스트레스 받는 경우는 아마 드물다고 생각합니다. 다만 시험에 쫓겨서, 취업에 쫓겨서, 애인과 헤어지는 등의 사회심리학적인 이유로 스트레스를 받는 편이 더 많을 겁니다. 이런 스트레스는 <strong>목숨을 위협받을 때처럼 강력하지는 않지만, 여러 달 혹은 여러 해 동안 지속되는 경우가 많습니다.</strong> HPA축에 이처럼 오랜 기간 지속적으로 스트레스가 가해지면, 스트레스 호르몬도 오랜 기간 분비되는 것입니다. 스트레스 호르몬에 오랫동안 노출된 뇌는 정상적인 기능을 잃고 싸우거나 혹은 달아나는 것에만 최우선으로 생각하게 되는 것입니다.</p><p>극도의 스트레스 상황이 계속 되면, 뇌는 즉각적인 문제 해결과 관련이 없는 것들(이를테면 수면욕, 식욕, 성욕, 장기 기억화 등)을 후순위로 밀어내게 됩니다. 또한 뇌는 빠르게 결정을 내리고 싶어 하고, 사회적 요령보다 즉각적인 문제 해결을 원하게 됩니다. 그로 인해 주변에서 문제가 보이면 곧바로 강하게 반응하고 사소한 일에도 짜증이 솟구치게 되는 것이죠.</p><blockquote><p>편도체는 여러 중요한 기능을 수행하는데,<br>(…) 가장 중요한 임무는 우리 주변의 위험을 탐색하고 발견하는 즉시 경고음을 울리는 것이다.</p><footer><strong>인스타브레인</strong><cite>안데르스 한센</cite></footer></blockquote><p>소설 『아몬드』의 제목이 나타내기도 하는 편도체가 HPA축을 작동하는 방식을 통상 <strong>‘화재경보 원칙’</strong>이라고 부른다고 합니다. 한 번 덜 울리기보다는 한 번 더 울리는 식이라는 뜻이죠. 이 과정은 빠르게 일어나지만 정확성은 떨어집니다. 하지만 나중에 후회하는 것보다야 조심하는 것이 낫기 때문에 이런 방식을 채택하는 거죠. 역시 우리 선조들의 삶의 방식에서는 이게 더 유리하다는 것은 이제는 자명해 보입니다.</p><blockquote><p>불안과 스트레스 상황에서 모두 똑같은 투쟁-도피 반응이 활성화된다. 그러나 활성화된 원인은 다르다. 스트레스가 위협이 되는 어떤 것에 대한 반응이라면, 불안은 위협이 될 수도 있는 어떤 것에 대한 반응이다. </p><footer><strong>인스타브레인</strong><cite>안데르스 한센</cite></footer></blockquote><p>스트레스는 위험에 대처하는 데 도움이 된다고 쳐도, 불안은 딱히 도움에 되는 데가 없어 보입니다. 하지만 불안은 중요한 뭔가를 계획하고 집중하도록 도와줍니다. 그렇다면 일어날 가능성이 희박한 사건에 대해서도 불안을 느끼는 이유는 무엇일까요? 그건 바로 역시 인류 관점에서 보면 최소 한도로 위험하다고 의심되는 순간, 스트레스 대응 시스템을 작동시키는 것이 생명 유지에 더 유리하기 때문입니다. 앞서 말한 화재경보 원칙이 발동한 것이죠. 또한 ‘사서 걱정한다.’는 말처럼 아직 일어나지도 않은 일, 미래에 대해서 걱정하며 불안을 느끼면 HPA축이 활성화됩니다. 이는 뇌가 진짜 위협과 상상 속의 위협을 구분하기 어려워 하기 때문이라고 합니다. </p><blockquote><p>우울증에 걸리는 가장 일반적인 원인은 장기적인 스트레스다.<br>(…) 만약 오랫동안 극심한 스트레스에 노출되었다면, 이 사람은 위험으로 가득 찬 세계에 놓인 셈이다. 그리고 이러한 감각은 여전히 우리 안에 살아 있다.</p><footer><strong>인스타브레인</strong><cite>안데르스 한센</cite></footer></blockquote><p>뇌는 극심한 스트레스를 받으면 몸을 사리고 이불을 머리에 뒤집에 쓰는 게 도움이 된다고 판단한다고 합니다. 그리고 그 이유는 역시 감정입니다. 뇌는 스트레스는 받으면 주변이 위험으로 가득 차 있다고 판단하여 그 자리에 도망치라고 조종하는 것입니다. 즉, 우울감을 느끼게 하여 스스로를 고립시키는 셈이죠.</p><p>우울증이 위험한 세계에서 자신을 보호려는 뇌의 전략이라는 주장을 뒷받침하는 근거는 바로 면역 체계입니다. 우울증 위험을 키우는 여러 유전자가 면역 체계를 활성화시키는 데도 관여를 하고 있어서, 학자들은 우울증이 질병의 감염으로부터 우리를 지키려는 뇌의 방어책이 아닌가 하는 추측을 했다고 합니다. 아마 감염증으로부터 스스로를 보호하기 위해 면역 체계를 활성화하고, 위험, 부상, 감염으로 부터 몸을 사리게 되었고, 후자는 우울감을 느껴 목적을 달성한다고 본 것이죠.</p>]]></content:encoded>
      
      
      <category domain="http://rasauq1122.github.io/categories/book/">book</category>
      
      
      <category domain="http://rasauq1122.github.io/tags/%EC%9D%B8%EC%8A%A4%ED%83%80%EB%B8%8C%EB%A0%88%EC%9D%B8/">인스타브레인</category>
      
      
      <comments>http://rasauq1122.github.io/2023/01/28/%EC%9D%B8%EC%8A%A4%ED%83%80%EB%B8%8C%EB%A0%88%EC%9D%B8-1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>역행자 - 5</title>
      <link>http://rasauq1122.github.io/2023/01/27/%EC%97%AD%ED%96%89%EC%9E%90-5/</link>
      <guid>http://rasauq1122.github.io/2023/01/27/%EC%97%AD%ED%96%89%EC%9E%90-5/</guid>
      <pubDate>Fri, 27 Jan 2023 06:39:55 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;7단계-역행자의-쳇바퀴&quot;&gt;&lt;a href=&quot;#7단계-역행자의-쳇바퀴&quot; class=&quot;headerlink&quot; title=&quot;7단계 : 역행자의 쳇바퀴&quot;&gt;&lt;/a&gt;7단계 : 역행자의 쳇바퀴&lt;/h2&gt;&lt;p&gt;『역행자』는 ‘역행자의 7단계 모델’를 순환할 </description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="7단계-역행자의-쳇바퀴"><a href="#7단계-역행자의-쳇바퀴" class="headerlink" title="7단계 : 역행자의 쳇바퀴"></a>7단계 : 역행자의 쳇바퀴</h2><p>『역행자』는 ‘역행자의 7단계 모델’를 순환할 때마다 필연적으로 실패를 마주하게 될 것이라고 말합니다. 자신이 이룬 성취에 맞게 목표가 재설정될 것이고, 그에 따라 필연적으로 난이도는 상승하게 되기 때문이죠. 중요한 것은 실패를 통해 자기 자신을 성찰하고 그것을 성장의 밑거름으로 삼는 것입니다. </p><h2 id="리뷰를-마치며"><a href="#리뷰를-마치며" class="headerlink" title="리뷰를 마치며"></a>리뷰를 마치며</h2><p>정말 좋은 책입니다. 아마 제 올해의 가장 큰 행운은 이발소에 사람이 많다고 집에 돌아간 것이 아니라 서점에 들려 이 책을 읽게 된 것이 아닐까 싶습니다. 수 많은 우연이 겹쳐 절 이 책 앞으로 끌고 오게 된 것은 아마 운명(ㅋㅋ;)이 아닐까도 싶습니다. 지금은 리디셀렉트라는 구독형 서비스로 책을 읽고 있지만, 아마 『역행자』는 제 돈을 주고 전자책의 형태든 종이책의 형태든 꼭 소장할 것 같습니다. </p><p>제 최근 일상은 꽤나 재미가 없는 편이었습니다. 할 만한 게임도 없어서 심심한데, 그렇다고 공부를 하고 싶지도 않고… 이런 잉여 인간같은 삶을 살던 저에게 나름대로 과제를 부여해주고 그것이 성공으로 가는 길임을 보장해주는 『역행자』는 꽤나 매력이 있습니다. </p><p>순리자인 제가 지금껏 한심하게 살고 있었던 건 제가 진짜 한심한 사람이 아니라, 그것이 인간이 가지고 있는 자의식, 무의식, 유전자의 특성이니 충분히 극복해낼 수 있다고 말해주는 것 같았습니다. 비록 제가 어느날 이게 다 무슨 소용인가 싶어서 22전략이고 뭐고 다 때려친다고 하더라도, 저 사실을 알고 있는 것 자체가 아주 큰 메리트로 남을 것 같습니다.</p><p>물론 그렇다고 때려칠 생각은 없습니다. 아직까지는 환경 설정까지 하면서 일을 벌리려고 하는 것이 조금 두렵기는 합니다. 그렇지만 한편으로는 그건 당연한 일이라고 생각합니다. 전 아직 7단계 중 1단계조차 완벽히 되지 않은 상태니까요. 무의식에 균열이 조금 간 것만으로는 쉽게 변하지 못하는 것이겠죠. </p><p>제가 이렇게 『역행자』에 대한 리뷰를 5일 동안이나 걸쳐 작성한 것은 22전략을 실천하기 위함도 있지만, 나중에 다시 정리된 글을 읽고 저 스스로를 바로잡기 위함도 있습니다. (다른 사람이 이 글을 볼 거라고는 생각이 잘 안되네요 ㅋㅋ.) 『역행자』를 통해 얻어간 것도 참 많고 아직 얻어가야 할 것도 여러 개 남았습니다. 앞으로는 운동도 좀 해보고, 정체성을 갖추기 위한 환경 설정도 갖추고 싶습니다. </p><p>이 글을 읽고 있는 제가 아닌 누군가가 계시다면 꼭 『역행자』를 읽어 보셨으면 좋겠습니다. 돈이 아까우시면 가까운 도서관이라도 가보셔서 읽어 보셨으면 좋겠습니다. 저도 처음에 책 가격이 15700원인 거 보고는 물가가 많이 올랐구나 싶었는데, 이 정도면 싼 것 같습니다.</p><p>저도 제 스스로가 『역행자』의 열렬한 팬이 될 수 있을 것이라고는 상상도 못했습니다. 이 포스팅에서 제가 쓴 글을 천천히 읽어보니까 정말 책 팔이 같네요 ㅋㅋ; 근데 진짜 한 번 믿어보시라는 말 밖에는 더 못하겠습니다. 이 책은 빨리 읽으면 빨리 읽을 수록 좋습니다. 방금 생각난 건데 전 올해 친구들에게 보낼 생일선물을 이 책으로 결정했습니다. 올해 초에 이 책을 읽게 된 것이 참 다행이네요. </p><p>이 정도로 『역행자』 리뷰를 마칠까 합니다. 다시 한 번 좋은 책이라는 걸 강조하고, 여기서 포스팅을 마무리할까 합니다. 내일부터는 아마 『인스타브레인』이라는 SNS와 뇌의 상관관계에 대해서 다룬 책에 대한 포스팅으로 찾아 뵙겠습니다. 긴 글 읽어주셔서 감사하고 좋은 하루 되세요!</p>]]></content:encoded>
      
      
      <category domain="http://rasauq1122.github.io/categories/book/">book</category>
      
      
      <category domain="http://rasauq1122.github.io/tags/%EC%97%AD%ED%96%89%EC%9D%B8/">역행인</category>
      
      
      <comments>http://rasauq1122.github.io/2023/01/27/%EC%97%AD%ED%96%89%EC%9E%90-5/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>여담</title>
      <link>http://rasauq1122.github.io/2023/01/26/%EC%97%AC%EB%8B%B4/</link>
      <guid>http://rasauq1122.github.io/2023/01/26/%EC%97%AC%EB%8B%B4/</guid>
      <pubDate>Thu, 26 Jan 2023 11:26:42 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;들어가며&quot;&gt;&lt;a href=&quot;#들어가며&quot; class=&quot;headerlink&quot; title=&quot;들어가며&quot;&gt;&lt;/a&gt;들어가며&lt;/h2&gt;&lt;p&gt;안녕하세요. rasauq1122입니다.&lt;br&gt;원래는 예정대로 『역행자』 리뷰 마지막 포스팅을 작성하려고 했습니다</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="들어가며"><a href="#들어가며" class="headerlink" title="들어가며"></a>들어가며</h2><p>안녕하세요. rasauq1122입니다.<br>원래는 예정대로 『역행자』 리뷰 마지막 포스팅을 작성하려고 했습니다. 그런데 블로그 세팅 관련해서 전을 굽는 바람에 그거에 대한 하소연(…)을 좀 해보려고 합니다.</p><h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h2><p>저는 <a href="https://hexo.io/ko/">hexo</a>라는 블로그 프레임워크를 통해 Github Pages를 구축하고 있습니다. 문제는 hexo는 npm을 통해 다운받을 수 있는데, 제 데스크탑 환경이 Windows라서 직접 설치하기는 애로사항이 있다는 점이었습니다. 이를 해결하기 위해 linux 환경이 필요했고, 저는 <a href="https://github.com/rasauq1122/rasauq1122.github.io">제 Github Pages 저장소</a>에서 Github Codespaces를 열어 환경을 구축하기로 결정했습니다.<br><img src="/2023/01/26/%EC%97%AC%EB%8B%B4/codespaces.jpg" alt="codespace"></p><p>그리고나서는 꽤나 만족하면서 블로그를 운영할 수 있게 되었습니다. 일단 한번 환경을 구축하고나니 markdown 문법으로 포스팅만 작성하면 알아서 html 정적 파일로 바꾸어 주고 게다가 예쁘기까지 하니까요! 기본적으로 지원하는 테마가 꽤 존재해서 그 중 마음에 드는 걸 찾아다가 저장소를 clone 받아오기만 하면 쉽게 블로그의 전체적인 이미지를 바꿀 수도 있었습니다. 문제는 테마들이 대부분 영어권 사용자를 타겟으로 해서 한글 폰트로 바꾸기 조금 애먹었다는 거 정도? 근데 그건 테마 내의 css 파일을 뜯어보면서 제가 원하는 폰트로 바꿀 수 있었기에 금방 해결이 됐습니다.</p><h2 id="Github-Codespaces"><a href="#Github-Codespaces" class="headerlink" title="Github Codespaces"></a>Github Codespaces</h2><p>하지만 얼마 지나지 않아 문제가 발생하고야 맙니다. Github Codespaces 환경을 열어두고 포스팅을 작성하다가 쓸 말을 정리하기 위해 책을 다시 살펴보다보면 체감상 5분? 10분? 정도만 지나도 환경과의 연결이 끊어지는 것이었습니다!<br><img src="/2023/01/26/%EC%97%AC%EB%8B%B4/stop.jpg" alt="stop"></p><p>이걸 해결하기 위해서는 연결이 끊어질 때마다 분노를 참으며 다시 연결을 하거나, 연결이 끊어지지 않도록 주기적으로 건들어야 해주는 방법 뿐이었습니다… 그래서 결국 Github Codespaces를 포기하고 wsl로 넘어가기로 오늘 결정한 것이었죠. </p><h2 id="이전"><a href="#이전" class="headerlink" title="이전"></a>이전</h2><p>github.io 저장소에는 github.io를 구성하는 정적 html 파일만 있어야 합니다. 그런데 문제는 제 Codespaces에서는 github.io 저장소에 정적 html 파일을 deploy할 뿐만 아니라 로컬에서도 서버를 돌려볼 수 있는 hexo 프레임워크까지 몽땅 포함시켜두었다는 것이죠… </p><p>제가 옮겨야 하는 건 정적 html 파일들이 아니라 hexo 프레임워크가 담겨 있는 쪽이었습니다. 제 github.io에 hexo 프레임워크를 전부 push해버리는 오점은 남기고 싶지 않았기 때문에, 저는 새로운 remote를 연결하여 그 쪽으로 push해 wsl에서 pull해오는 방법을 떠올렸습니다! 아주 똑똑한 방법이라고 자화자찬하고 있었죠. <strong>Codespaces 환경에서는 열린 저장소로만 push를 할 수 있다는 사실을 알기 전까지는…</strong></p><p>그래서 어쩔 수 없이 github.io 저장소에서 branch를 새로 판 후, 그 쪽으로 push하는 방법으로 우회했습니다. 새로 판 branch는 프레임워크를 옮긴 후 여러분들에게는 보이지 않게 날려버렸구요. 그 밖에도 hexo theme가 다른 저장소에서 clone해서 사용하는 방식이라 submodule을 이용했어야 했고… 그 전에 hexo theme에서 제 입맛대로 바꾼 점이 몇가지 존재하여 따로 저장소에 fork를 한 후 그걸 submodule로 옮겨야 했어야 했다는… 몇 가지 고생담이 더 존재하지만 일단 이 정도로 포스팅을 마칠까 합니다…</p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>제가 개발도 하는 사람이라는 걸 어필하기 위해서 이런 내용의 글도 한 번 작성해보았습니다 ㅎㅎ. 내일은 꼭 『역행자』 리뷰를 마칠 수 있으면 좋겠네요. 긴 글 읽어주셔서 감사합니다!</p>]]></content:encoded>
      
      
      <category domain="http://rasauq1122.github.io/categories/small-talk/">small_talk</category>
      
      
      <category domain="http://rasauq1122.github.io/tags/development/">development</category>
      
      <category domain="http://rasauq1122.github.io/tags/hexo/">hexo</category>
      
      <category domain="http://rasauq1122.github.io/tags/codespaces/">codespaces</category>
      
      
      <comments>http://rasauq1122.github.io/2023/01/26/%EC%97%AC%EB%8B%B4/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>역행자 - 4</title>
      <link>http://rasauq1122.github.io/2023/01/25/%EC%97%AD%ED%96%89%EC%9E%90-4/</link>
      <guid>http://rasauq1122.github.io/2023/01/25/%EC%97%AD%ED%96%89%EC%9E%90-4/</guid>
      <pubDate>Tue, 24 Jan 2023 22:16:22 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;7단계는 내일 『역행자』를 읽으면서 느낀 생각? 등과 함께 올리도록 하겠습니다!&lt;/p&gt;
&lt;h2 id=&quot;5단계-역행자의-지식&quot;&gt;&lt;a href=&quot;#5단계-역행자의-지식&quot; class=&quot;headerlink&quot; title=&quot;5단계 : 역행자의 지식&quot;&gt;&lt;/a</description>
        
      
      
      
      <content:encoded><![CDATA[<p>7단계는 내일 『역행자』를 읽으면서 느낀 생각? 등과 함께 올리도록 하겠습니다!</p><h2 id="5단계-역행자의-지식"><a href="#5단계-역행자의-지식" class="headerlink" title="5단계 : 역행자의 지식"></a>5단계 : 역행자의 지식</h2><p>이번 단계에서 『역행자』는 역행자들의 본성을 역행하는 지식을 알려줍니다. 기버 이론과 확률 게임, 타이탄의 도구, 그리고 메타인지에 대한 이야기를 통해 역행자의 지식에 대하여 알아보도록 합시다.</p><p>먼저 기버 이론입니다. 『오리지널스』의 저자 애덤 그랜트는 책 『기브 앤 테이크』를 통해 사람을 기버(Giver), 테이터(Taker), 매처(Matcher)의 세 부류로 나눌 수 있다고 주장합니다. 영어단어 그대로 기버는 ‘퍼주는 사람’, 테이커는 ‘받기만 하는 사람’, 매처는 ‘딱 받은 만큼만 돌려주는 사람’라고 합니다. 재밌는 사실은 이 중 가장 가난한 사람이 기버지만, 가장 부자인 사람 또한 기버라는 것입니다. 순리자들은 저번 단계에서 언급된 자의식, 자기합리화, 손실 회피 경향을 통해 순간의 판단을 그르치고 눈 앞의 이득만 생각하는 반면, 역행자들은 지금 남을 돕는 것이 결국 자신에게로 돌아와 큰 이득이 될 것이라고 생각하여 ‘남에게 퍼줄 수 있는’ 것이죠. 단, 가장 가난한 사람에 속하는 기버는 ‘바보 같은 기버’로 매처나 테이커에게 계속 잘못된 선심을 쓰지 않도록 주의해야 합니다.</p><p>『역행자』는 감정을 배제하고 확률에 배팅하라고 말합니다. 우리는 손실 회피 경향에 속아 지레 겁을 먹고 어리석은 판단을 하기 마련입니다. 어차피 ‘인생은 확률 게임’이므로 항상 승률이 높은 쪽에만 베팅을 한다면 한 판 한 판은 질 수 있어도 장기적으로 봤을 때는 결국 이기게 된다는 논리입니다. 질 때는 ‘나는 잘했지만 확률상 어쩔 수 없었어.’라고 생각하는 것이죠. 요컨대 의사 결정을 할 때 감정이 방해하지 못하게 하고 이성을 따르라는 소리인거죠.</p><p>어떤 분야에서 일류가 된다는 건 타고난 재능은 물론 충분한 노력까지 갖추어야 가능한 일입니다. 그렇다면 이류는 어떨까요? 『역행자』는 상위 20퍼는 충분한 노력만 갖춘다면 누구나 될 수 있는 경지라고 주장합니다. 재능이 없더라도 여러 가지 분야에서 이류가 될 수 있다면 그걸 합쳐 일류를 이길 수 있다고 합니다. ‘타이탄의 도구’를 통해서요! 『역행자』가 소개하는 타이탄의 도구는 온라인 마케팅, 디자인, 동영상 편집 기술, 프로그래밍 등이 있습니다. 그리고 이러한 도구들을 배울 수 있는 방법도 소개하고 있으니 관심있으신 분들은 직접 책을 읽어 확인하시면 더 좋을 것 같네요.</p><p>메타인지는 ‘내가 무언가를 아는지 모르는지 아는 능력’입니다. 메타인지가 없는 순리자들은 자신은 이미 다 알고 있다고 착각하거나 해도 안된다는 식으로 스스로를 과소평가합니다.<br><img src="/2023/01/25/%EC%97%AD%ED%96%89%EC%9E%90-4/dunning.png" alt="더닝 크루거 효과"><br>우매함의 봉우리라고 많이 알려져 있는 더닝 크루거 효과가 바로 그것이죠. 『역행자』는 메타인지가 위에서 말한 정의를 넘어 ‘자신을 객관화할 수 있는 능력’이라고 주장합니다. 메타인지가 잘 될수록 의사 결정력이 전반적으로 높아지고 스스로 어떤 부분이 부족한지 알고 있으므로 저절로 발전이 일어날 수 있다며 역행자가 되기 위해 필요한 능력이라고 말합니다. 이를 기르기 위해 필요한 것은 역시 독서죠! 『역행자』가 독서를 얼마나 중요하게 생각하는지는 이제 다들 알고 계실 거라 믿습니다. 독서 외에도 메타인지를 늘리기 위해 필요한 또 한 가지는 바로 실행입니다. 책을 통해 현실적인 판단력이 바로 높아지지는 않는다고 말하며 실행의 중요성 또한 강조합니다. 실패하더라도 상관없습니다. 오히려 실패를 통해 충격을 받고 자신의 어리석음을 깨우치게 되고 메타인지가 높아지게 되는 거죠!</p><h2 id="6단계-경제적-자유를-얻는-구체적-루트"><a href="#6단계-경제적-자유를-얻는-구체적-루트" class="headerlink" title="6단계 : 경제적 자유를 얻는 구체적 루트"></a>6단계 : 경제적 자유를 얻는 구체적 루트</h2><p>이제 자의식도 해체했고, 정체성도 갖췄고, 유전자 오작동을 이해하고, 뇌를 최적화했고, 지식까지 갖추었습니다! 나머지는 어떻게 하면 돈을 벌 수 있을 것인가에 대한 <strong>구체적인</strong> 방법이죠! 다만 이 포스팅에서는 다루지 않겠습니다 ㅎㅎ… 길기도 하고 케이스 별로도 아주 잘 분석을 해주셔서 여기서 다루기엔 너무 내용이 많을 것 같다는 생각이 드네요. 관심있으신 분은 『역행자』를 직접 읽어보며 자신의 케이스에 맞는 루트를 참고하시면 좋겠습니다! 대신 저는 『역행자』에서 다룬 돈을 벌 수 있는 근본적 원리와 경제적 자유를 위한 공부법을 소개하고자 합니다.</p><p>『역행자』에서 말하는 돈을 버는 근본 원리는 단 2가지입니다. 첫 번째, 상대를 편하게 해주기. 두 번째, 상대를 행복하게 해주기. 아주 당연한 소리를 하는 것처럼 보이는 건 실제로 당연한 소리이기 때문이라고 생각합니다. 단, 『역행자』는 이 원리를 무시한 사업은 절대 오래 지속될 수 없다고 설명합니다. 이를 테면 주가 조작, 보이스 피싱, 혹은 이런 범죄까지는 아니더라도 어디에도 쓸데가 없는 제품을 생산하는 공장처럼 말이죠. </p><p>『역행자』는 경제적 자유를 ‘함락시켜야 하는 성’으로 비유합니다. 성에는 무찔러야 할 병사가 10만명 정도 있다고 가정합시다.  평범한 회사원은 ‘병사’로 그들은 시간당 1명의 병사를 처치할 수 있다고 합니다. 계산해보면 10년에 27000명의 병사를 해치울 수 있고, 아마 죽을 때까지 성을 완전히 함락시키기는 어려워 보입니다. 그럼 의사와 변호사 같은 고소득 전문직은 어떨까요? 그들은 ‘장수’입니다. 이들은 병사보다 힘이 세서 시간당 5~10명의 병사를 처치할 수 있다고 하죠. 그럼 앞서 말한 병사에 비해서는 더 빠르게 성을 함락시킬 수 있겠죠. 다만 치명적인 문제가 존재합니다. 이들은 잠을 자고 있을 땐 대신 싸워줄 이가 없다는 거죠. 자신이 자고 있어줄 때도 자신을 위해 대신 싸워줄 병사들이 있는 사람들을 『역행자』에서는 ‘부대 지휘자’라고 말합니다. 이를 테면 건물주나 베스트 셀러 작가 또는 유튜버와 같은 사람들을 얘기하는 거죠. 그래서 경제적 자유에 이르기 위해 가장 좋은 방법은 ‘부대 지휘자’가 되는 것이죠. 그 방법은 무엇이냐구요? 바로 ‘사업’과 ‘투자’라 주장합니다.</p><p>마지막으로, 경제적 자유를 얻기 위한 5가지 공부법을 소개합니다.</p><ol><li>정체성 변화 : 역행자가 되기 위한 2번째 단계이기도 한 정체성 변화는 집에서 가만히 있기만 해서는 이루어지지 않는다고 합니다. 밖으로 나가서 생존 위기를 겪고, 의도적으로 일을 벌이고, 자신의 모습을 보고 현타를 느끼는 걸 통해 변화할 수 있다고 말합니다. </li><li>20권의 법칙 : 역시 책을 많이 읽어야 한다고 주장합니다. 특히 어떤 걸 배우고 싶다면 그것에 관한 책 20권을 쌓아두고 읽으라고 합니다. 그렇게 하면 자신의 머릿속을 그 내용으로 채울 수 있고, 그렇게 되면 머리가 저절로 그 쪽으로 생각하게끔 돌아가고 정체성이 바뀌게 되는 것이죠!</li><li>유튜브 시청 : 책 읽기에 비해서는 효율이 좀 떨어지는 방법이지만, 뇌를 덜 써도 된다는 장점이 있는 방법으로 추천하였습니다. 대신 필기를 하면서 보라고 주장합니다. ‘유튜버들은 전부 다 사기꾼 아닌가?’하는 색안경을 끼고 보지 말고 되도록이면 (실제로 사기꾼이 맞다 하더라도) 자신보다 한 수 위라는 걸 인정하고 배울 점을 찾으라고 합니다. </li><li>글쓰기를 통한 초사고 세팅 : 여러 번 언급했듯, 글쓰기는 뇌를 발달시키고 논리성과 창의성을 증진시키는 최고의 방법이라고 말합니다! 앞서 말한 ‘20권의 법칙’과 ‘유튜브 시청’을 한 후에는 보고 들은 내용을 블로그에 정리해두라고 권유합니다. 자신의 생각을 정리하고 빠트린 부분을 채워 넣기 위해 다시 찾아 보는 등 훌륭한 복습 방법이라고 합니다.</li><li>온라인을 넘어 오프라인 학습으로 : 무료 온라인 강의를 충분히 접했으면, 유료 온라인 강의를, 그 다음은 오프라인 강의를 찾아다니라고 합니다. 배우고자 하는 내용에 돈까지 쓰게 되면, 아무래도 ‘나는 여기에 돈을 쓰는 사람’이라는 정체성이 생기게 되는 것이죠. 조금은 아깝다고 생각할 수 있지만, 미래의 나를 위한 투자라고 생각(확률 게임의 예)하라고 합니다. 오프라인 강의도 마찬가지로 비슷하게 정체성을 만들 수 있을 뿐만 아니라 자신과 관심 분야가 같은 사람들과도 접할 수 있는 좋은 기회라고 합니다.</li></ol>]]></content:encoded>
      
      
      <category domain="http://rasauq1122.github.io/categories/book/">book</category>
      
      
      <category domain="http://rasauq1122.github.io/tags/%EC%97%AD%ED%96%89%EC%9E%90/">역행자</category>
      
      
      <comments>http://rasauq1122.github.io/2023/01/25/%EC%97%AD%ED%96%89%EC%9E%90-4/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>역행자 - 3</title>
      <link>http://rasauq1122.github.io/2023/01/24/%EC%97%AD%ED%96%89%EC%9E%90-3/</link>
      <guid>http://rasauq1122.github.io/2023/01/24/%EC%97%AD%ED%96%89%EC%9E%90-3/</guid>
      <pubDate>Tue, 24 Jan 2023 01:15:34 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;오늘은 4단계만 쓰도록 하겠습니다. 내일은 5~7단계를 쓸 수 있으면 좋겠네요. 제 게으름을 용서하세요…&lt;/p&gt;
&lt;h2 id=&quot;4단계-뇌-자동화&quot;&gt;&lt;a href=&quot;#4단계-뇌-자동화&quot; class=&quot;headerlink&quot; title=&quot;4단계 : 뇌 </description>
        
      
      
      
      <content:encoded><![CDATA[<p>오늘은 4단계만 쓰도록 하겠습니다. 내일은 5~7단계를 쓸 수 있으면 좋겠네요. 제 게으름을 용서하세요…</p><h2 id="4단계-뇌-자동화"><a href="#4단계-뇌-자동화" class="headerlink" title="4단계 : 뇌 자동화"></a>4단계 : 뇌 자동화</h2><p>『역행자』에서는 ‘뇌 최적화’라는 개념을 쉽게 이해시키기 위해 다음과 같은 예를 들었습니다. 불량배를 한 명 무찌를 때마다 천만원씩 준다고 가정해봅시다. 그러면 과거 훈련에 정진하여 근력, 체력, 그리고 기술을 모두 갖춘 권투 선수는 자신의 권투 기술로 평생 돈을 벌며 살 수 있게 될 것입니다. 이걸 『역행자』에서는 운동을 통한 ‘신체 최적화’를 통해 평생 돈을 벌며 살 수 있게 된 것이라고 설명합니다. 그리고 뇌 또한 위와 비슷한 원리로 최적화가 가능하다고 말합니다. ‘뇌 최적화’를 통해 자연스럽게 지능이 발달하고 순리자에 비해 올바른 판단을 내리게 될 가능성이 더 높아지는 것이죠.<br>그걸 위한 구체적인 방법의 첫번째로는 <strong>22 전략</strong>이 있습니다. 독서의 중요성을 끊임없이 강조하는 『역행자』답게, 2년간 매일 2시간씩 책을 읽고 글을 쓰는 방법을 통해 뇌를 최적화시킬 수 있다고 말합니다. 몸의 코어 근육을 발달시킨 사람이 어떤 스포츠든 다 잘할 수 있는 것처럼, 독서를 통해 기본기를 다져두면 뇌의 코어를 발달시켜 뭘 하더라도 남들보다 훨씬 앞서갈 수 있다고 말합니다. 꾸준히 근육을 자극해야 근력을 키울 수 있는 것처럼 뇌의 근육을 꾸준히 자극해야 성장시킬 수 있다는 것입니다. 글쓰기의 중요성도 독서의 중요성 만큼 지속적으로 강조하는데, 이는 글쓰기가 의사 결정력을 높이는데 도움이 되기 때문입니다. 생각하는 것들을 조합하고 저장하여 완전한 지식을 굳히기 위해서는 글쓰기를 해야 한다는 것이죠. 제가 이렇게 블로그에 글을 올리게 된 것도 22 전략을 실천하기 위해서죠 ㅎㅎ.<br>다음은 <strong>오목 이론</strong>입니다. 삼목과 사목으로 이어지도록 수가 연계되게끔 계속 돌을 두면서 끊임없이 공격을 할 수 있는 오목처럼, 우리 인생도 항상 승리하는 수만 둘 수 있다면 인생으로부터의 자유를 얻을 수 있다는 이론입니다. 『역행자』에서 오목 이론을 통해 말하고 싶은 건, 단기적으로는 당장 손해일 수도 있어도 장기적으로 봤을 때는 결국 도움이 될 수 있는 수를 두라는 것입니다. 이를 테면 야근이 있는 회사보다는 돈을 덜 벌더라도 쉬운 직장으로 이동하여 자기계발 시간을 확보하라는 것이죠.<br>마지막으로는 뇌에 자극을 주어 뇌의 코어를 만들 수 있게 해주는 방법 3가지를 소개합니다.</p><ol><li><strong>안쓰던 뇌 자극하기 :</strong> 과학 분야의 노벨상을 탄 사람들은 과학에 대한 이해도는 다른 과학자들과 큰 차이는 없었지만, 모두 과학 말고 문학이나 역사와 같은 다른 분야에도 조예가 깊었다고 합니다. 이를 통해 『역행자』는 일이 잘 풀리거나 새로운 아이디어를 떠올리고 싶을 때는 전혀 다른 분야를 공부해보는 방법을 추천하고 있습니다.</li><li><strong>안 가본 길 걷기 :</strong> 운동은 행복해지게 할 뿐만 아니라 뇌의 효율을 극대화시켜준다고 합니다. 음식을 찾아다니기 위해 운동하던 우리 선조의 학습과 기억 능력은 운동 기능과 함께 진화해왔다고 합니다. 그래서 우리 뇌는 움직이지 않으면 새로운 무언가를 배울 필요를 전혀 못 느낀다고 합니다. 『역행자』는 가벼운 유산소 운동과 약간 복잡한 운동이 뇌의 인지 기능 향상에 좋다며 이에 딱 맞는 아예 안 가본 장소에서 산책하는 걸 권합니다.</li><li><strong>충분한 수면 :</strong> 뇌가 최대 성능을 내기 위해서는 최소 8시간 이상의 수면을 취해야 한다고 합니다. 잠을 통해서 뇌는 그날 일어난 일을 정리해 장기기억으로 전환하는 장기기억화가 일어난다고 합니다. 근육도 너무 운동만 하면 안되고 영양이 충분히 공급되어야 성장할 수 있는 것과 같은 논리라고 생각하면 이해가 쉽습니다.</li></ol>]]></content:encoded>
      
      
      <category domain="http://rasauq1122.github.io/categories/book/">book</category>
      
      
      <category domain="http://rasauq1122.github.io/tags/%EC%97%AD%ED%96%89%EC%9E%90/">역행자</category>
      
      
      <comments>http://rasauq1122.github.io/2023/01/24/%EC%97%AD%ED%96%89%EC%9E%90-3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>역행자 - 2</title>
      <link>http://rasauq1122.github.io/2023/01/23/%EC%97%AD%ED%96%89%EC%9E%90-2/</link>
      <guid>http://rasauq1122.github.io/2023/01/23/%EC%97%AD%ED%96%89%EC%9E%90-2/</guid>
      <pubDate>Sun, 22 Jan 2023 21:23:43 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;개요&quot;&gt;&lt;a href=&quot;#개요&quot; class=&quot;headerlink&quot; title=&quot;개요&quot;&gt;&lt;/a&gt;개요&lt;/h2&gt;&lt;p&gt;책 『역행자』의 제목이기도한 ‘역행자’는 무엇일까요?&lt;br&gt;역행자는 인간의 타고난 운명을 그대로 따르며 사는 ‘순리자’에 반대</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><p>책 『역행자』의 제목이기도한 ‘역행자’는 무엇일까요?<br>역행자는 인간의 타고난 운명을 그대로 따르며 사는 ‘순리자’에 반대되는 말입니다. 즉 역행자는 인간의 정해진 운명을 거스르는 능력을 갖는 상위 5퍼센트의 인간이라고 소개합니다.<br><em><strong>인간의 타고난 운명</strong></em>이라니 정말 중2병스러운 단어라고 생각하실지도 모르겠습니다. 다만 여기서 말하는 운명이란 예상하신 것보다는 학문적인 내용일 겁니다.<br>인류의 문명은 아주 빠르게 성장했습니다. 그 결과명류는 문명에 맞도록 진화하지 못했습니다. 그에 따라 인류의 유전자는 아직 원시 사회 수준에 머물러 있는 것입니다. 이를 테면 인간은 새로운 시도를 꺼리고 실패를 두려워 하는 본능을 갖고 있다고 합니다. 원시 사회에서의 실패는 죽음을 의미했기 때문인데, 니대 사회에서의 실패는 그 정도 수준이 아니더라도 이러한 본능의 유전자를 갖고 있어 새로운 시도를 꺼리게 되는 것이라고 합니다.<br>『역행자』에서는 이러한 인간의 타고난 운명을 거스르고 합리적인 판단을 하여 경제적 자유를 얻는 법을 7단계로 나누어 기술한 책입니다. 저는 이 책에서 소개하는 방법을 단계별로 정리하여 소개해드릴까 합니다. 오늘은 3단계까지 써볼 예정입니다.</p><h2 id="1단계-자의식-해체"><a href="#1단계-자의식-해체" class="headerlink" title="1단계 : 자의식 해체"></a>1단계 : 자의식 해체</h2><p>객관적으로 봤을 때 자기의 잘못이어도 남 탓을 하는 경우가 있습니다. 왜 그러는 걸까요?<br>특히 게임을 하다 보면 그런 경우가 많습니다. 저 같은 경우는 요즘 오버워치2를 자주 합니다. 가볍게 게임을 2~3판 정도 해보면, 뒤도 안 돌아보고 무지성으로 들어간 탱커가 죽은 후 애꿎은 힐러를 비난하는 장면은 꽤 흔합니다.<br>이러한 일이 일어나는 이유는 자신의 잘못을 인정하면 자아가 손상되기 때문에 자의식은 그 잘못을 타인의 잘못으로 돌리는 겁니다. 책의 표현을 그대로 인용하면 ‘<strong>상처를 봉합하고 적당한 스토리를 만들어서 스스로가 일관되며 가치 있는 존재처럼 느끼게</strong>‘ 해주는 거죠.<br>『역행자』는 지나친 자의식이 자아를 지키기 위해서 발전을 막는다고 설명합니다. 그럼 위 설명에서 탱커는 어떻게 행동하는 게 더 합리적이었을까요? 저라면 힐러에게 피드백을 요청했을 것 같습니다. ‘제가 너무 깊숙이 들어갔나요?’, ‘힐을 줄 수 없는 상황이었나요?’ 등 남 탓보다는 더 괜찮은 채팅이 있을 겁니다.<br>게임으로 예를 들어서 비유가 좀 적절하지 않고 글이 좀 웃긴 모양세가 된 것 같습니다만 (ㅋㅋ;), 저야 겜덕후라 그렇고 여러분은 여러분 상황에 맞는 다른 적절한 예를 대입해서 생각하시면 좋을 것 같습니다.<br><strong>중요한 건 자의식이 자아를 지키기 위해서 자신의 잘못을 객관적으로 보지 못하고 계속 남을 탓하게 된다는 것입니다.</strong> 『역행자』는 이러한 자의식을 해체하여 문제를 객관적으로 파악하여 앞으로 나아가 발전해야 한다고 말합니다. 그에 대한 구체적인 방법은 다음과 같습니다. </p><ol><li>탐색 : 일단 불편한 감정을 느끼게 된다면 기계적으로 ‘자의식 해체’를 떠올리는 것부터 시작하여, 이 불편한 감정이 어떤 열등감에 의해 발현된 감정인지 생각해 봅니다.</li><li>인정 : 어떤 열등감이 불편한 감정을 이끌었는지 알아냈다면 그 열등감을 그냥 인정합니다. </li><li>전환 : 열등감을 인정하고 바로 이어서, 그 열등감을 없애기 위해 어떻게 해야할지 고민해봅니다.</li></ol><h2 id="2단계-정체성-만들기"><a href="#2단계-정체성-만들기" class="headerlink" title="2단계 : 정체성 만들기"></a>2단계 : 정체성 만들기</h2><p>그 다음 단계는 정체성을 만드는 겁니다.<br>조금 유치하지만 쉽게 설명하자면, 스스로를 ‘평범한 사람’이라고 인식했을 때보다는 ‘어떤 일도 해낼 수 있는 대단한 사람’으로 인식했을 때 더 자기 자신을 가치 있게 여긴다는 겁니다. 하지만 역으로 생각해보면 과연 자기 자신을 평범하다고 여기는 사람이 일생일대의 기회가 온다고 해도 그걸 눈치채고 잡을 수 있을까요? 그런 식의 논리입니다.<br>『역행자』는 자수성가한 사람들의 스토리를 보다보면 앞서 말한 이런 정체성을 완전히 뒤바꾸는 사건이 일어난다고 말합니다. 즉 결정적 사건이 인생을 바꾸는 계기가 되는 것입니다. 하지만 그런 극적인 사건이 우리에게 일어난다는 보장도 없을 뿐더러 일어난다고 해도 실제로 바뀔 수 있을지 어떨지는 미지수입니다. 하지만 『역행자』는 이런 사건을 인위적으로 만들어낼 수 있다고 말합니다. <strong>자의식을 해체한 후에는 새로운 정체성을 갖는 자의식을 세우는 겁니다.</strong> 이를 ‘정체성 만들기’라고 합니다.<br>새로운 내용을 배우는 데 필요한 정체성은 ‘뇌가 굳어서 아무것도 알아 먹지 못하는 사람’보다는 ‘스펀지처럼 다른 사람의 지식을 흡수할 수 있는 사람’이라는 것에는 모두 동의할 것입니다. 하지만 이런 정체성의 중요성을 인정하는 거랑은 별개로 이러한 정체성을 자신에게 심는 건 꽤나 어려워 보입니다. 의식적으로 그렇게 생각한다고 해도 무의식의 한편에서는 ‘내가 과연 그런 사람이 될 수 있을까?’와 같은 생각이 들게 되기 마련입니다.<br>여기서 『역행자』는 다시 한번 독서의 중요성을 강조합니다. 다양한 자기계발서를 읽으며 누가봐도 자신보다 더 안좋은 환경에서 성공한 사람들의 사례를 보면서 나 자신도 바뀔 수 있다는 생각을 무의식에 심을 수 있다고 말합니다.<br>그 다음은 그러한 정체성을 갖을 수 밖에 없도록 환경을 설계하는 것입니다. 스스로를 궁지에 몰아놓는 겁니다. 다른 사람들에게 나는 무엇이 될 거라고 말하고 다니는 방법이나 돈을 묶어 놓는 등의 방법을 사용합니다. 다른 방법으로는 집단에 속하는 방법이 있습니다. 책을 꾸준히 읽고 싶다면 독서 소모임에 들어가면 되고, 프로그래밍을 배우고 싶다면 프로그래밍 스터디에 참여하면 됩니다. 집단에 속하게 되면 처음에는 시큰둥할지 몰라도 점차 그 집단에 물들게 되어 더 적극적으로 임하게 됩니다. </p><h2 id="3단계-유전자-오작동"><a href="#3단계-유전자-오작동" class="headerlink" title="3단계 : 유전자 오작동"></a>3단계 : 유전자 오작동</h2><p><a href="http://localhost:4000/2023/01/22/%EC%97%AD%ED%96%89%EC%9E%90-2/#%EA%B0%9C%EC%9A%94">개요</a>에서 말했듯, 인류는 문명에 맞도록 진화하지 못했습니다. 나방은 빛을 향해 일정한 각도로 나는 특성을 갖고 있다고 합니다. 그 특성이 수만년 전 초원에서는 도움이 됐을지는 몰라도 현대에 와서는 가로등 유리 안에 들어가 스스로를 죽게 만들게 되었습니다. 이러한 현상을 『역행자』에서는 ‘클루지 바이러스’라고 정의합니다. 그리고 이런 클루지 바이러스는 인간에게도 적용됩니다.<br>인간은 새로운 도전을 꺼리게 되고, 소외감을 느끼고, 편견을 갖도록 진화했습니다. 원시 사회에서는 분명 그렇게 하는 것이 도움이 됐을 겁니다. 새로운 도전을 한답시고 호랑이와 맞서 싸우거나, 부족에서 배제되거나, 버섯을 먹고 죽은 사람을 보고도 버섯을 먹는 사람은 그렇지 않은 사람보다 죽을 확률이 더 높을 겁니다.<br>『역행자』에서는 판단을 내릴 때 다음 3가지의 대표적인 유전자 오작동을 주의하라고 말합니다.</p><ol><li>평판 오작동 </li><li>새로운 경험에 대한 오작동</li><li>손실 회피 편향</li></ol>]]></content:encoded>
      
      
      <category domain="http://rasauq1122.github.io/categories/book/">book</category>
      
      
      <category domain="http://rasauq1122.github.io/tags/%EC%97%AD%ED%96%89%EC%9E%90/">역행자</category>
      
      
      <comments>http://rasauq1122.github.io/2023/01/23/%EC%97%AD%ED%96%89%EC%9E%90-2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>역행자 - 1</title>
      <link>http://rasauq1122.github.io/2023/01/22/%EC%97%AD%ED%96%89%EC%9E%90-1/</link>
      <guid>http://rasauq1122.github.io/2023/01/22/%EC%97%AD%ED%96%89%EC%9E%90-1/</guid>
      <pubDate>Sat, 21 Jan 2023 21:55:59 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;서점에-갔어요&quot;&gt;&lt;a href=&quot;#서점에-갔어요&quot; class=&quot;headerlink&quot; title=&quot;서점에 갔어요&quot;&gt;&lt;/a&gt;서점에 갔어요&lt;/h2&gt;&lt;p&gt;안녕하세요. rasauq1122입니다.&lt;br&gt;엊그제 저녁에 약속이 있었어요. 그래서 1시간</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="서점에-갔어요"><a href="#서점에-갔어요" class="headerlink" title="서점에 갔어요"></a>서점에 갔어요</h2><p>안녕하세요. rasauq1122입니다.<br>엊그제 저녁에 약속이 있었어요. 그래서 1시간 정도 일찍 나와서 가는 김에 이발소에 들리면 좋겠다고 생각했습니다. 근데 설날 직전이라 그런지 <del>(사실 예약을 안하고 가서)</del> 사람이 너무 많아서 약속 시간에 못 맞추겠더라구요. 집 가기는 좀 시간이 애매해질 것 같아서 그냥 근처 서점에서 기다리기로 했습니다. </p><h2 id="책을-구경했어요"><a href="#책을-구경했어요" class="headerlink" title="책을 구경했어요"></a>책을 구경했어요</h2><p>최근에 영어에 관심이 생겼어요. 그중에서도 특히 회화가 되면 좋을 것 같아서 관련된 책을 좀 유심히 봤습니다. 근데 심사숙고해서 하나 사놓고 아예 펴보지도 않은 책이 집에 곤히 자고 있어서 다른 책을 보기로 했습니다. 원래 소설 위주로 보는 편인데 왠일로 그때는 무슨 바람이 불었는지 자기계발서 코너 쪽으로 갔어요. 책을 하나 집었는데 제목이 『역행자』라는 책이었어요.</p><h2 id="역행자"><a href="#역행자" class="headerlink" title="역행자"></a>역행자</h2><p>일단 처음에 눈길을 끈 건 저자의 필력이었어요. 글쓰기를 굉장히 반복적으로 많이 하셨다고 하더라구요. 정말 글이 읽기 쉬웠어요. 그리고 무엇보다도 ‘무의식의 균열’이라는 말을 하면서 ‘네가 바뀌려고 마음의 문을 열어야 바뀔 수 있다.’라는 조금 뻔한 말을 다양한 예시와 용어를 통해 설명하니까 다른 자기계발서에 비해 조금 거부감 없이 설득이 되더라구요. </p><h2 id="시간이-됐어요"><a href="#시간이-됐어요" class="headerlink" title="시간이 됐어요"></a>시간이 됐어요</h2><p>계속 읽다가 곧 약속 시간이 될 것 같았어요. 좋은 책이라고 생각이 들더라구요. 사서 집에 가서 볼까하는 생각에 책을 덮고 뒷표지에 적힌 가격을 보니까 좀 비싸더라구요. 그리고 계속 돌아다니면서 책을 들고 다니기엔 좀 걸리적 거릴 것 같아서 책은 안사고 서점에 나왔어요. </p><h2 id="집에-왔어요"><a href="#집에-왔어요" class="headerlink" title="집에 왔어요"></a>집에 왔어요</h2><p>약속이 끝나고 집에 오니까 서점에서 사지 않고 나온 『역행자』가 문뜩 생각이 나길래 리디북스를 통해서 살 수 있는지 알아보려고 했어요. 근데 리디셀렉트 구독하면 책을 볼 수 있길래 바로 구독했습니다. 그래서 어제 오늘해서 이틀동안 책을 좀 보고 있어요. </p><h2 id="글을-써요"><a href="#글을-써요" class="headerlink" title="글을 써요"></a>글을 써요</h2><p>근데 책에서 ‘독서’와 ‘글쓰기’의 중요성을 많이 어필하시더라구요. 독서는 그냥 수동적으로 내가 써져 있는 글을 읽으면 되는 거지만, 글쓰기는 능동적으로 생각하면서 써야되는 거라 조금 어려운 것 같더라구요. 그래서 책을 읽고 난 후에 드는 생각과 책의 내용을 좀 정리해서 블로그에 작성해보려고 해요. 일단 오늘은 이정도로만 쓰고 내일 다시 책을 읽고 난 후, 챕터별로 정리하면서 글을 써보면 좋을 것 같네요. 모두 좋은 하루 되세요.</p>]]></content:encoded>
      
      
      <category domain="http://rasauq1122.github.io/categories/book/">book</category>
      
      
      <category domain="http://rasauq1122.github.io/tags/%EC%97%AD%ED%96%89%EC%9E%90/">역행자</category>
      
      
      <comments>http://rasauq1122.github.io/2023/01/22/%EC%97%AD%ED%96%89%EC%9E%90-1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>오늘의 코드포스 (1762)</title>
      <link>http://rasauq1122.github.io/2022/12/27/%EC%98%A4%EB%8A%98%EC%9D%98-%EC%BD%94%EB%93%9C%ED%8F%AC%EC%8A%A4/</link>
      <guid>http://rasauq1122.github.io/2022/12/27/%EC%98%A4%EB%8A%98%EC%9D%98-%EC%BD%94%EB%93%9C%ED%8F%AC%EC%8A%A4/</guid>
      <pubDate>Tue, 27 Dec 2022 00:29:34 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;갑자기 심심해서 코드포스 라운드를 진행해봤습니다. 진행한 대회는 &lt;a href=&quot;https://codeforces.com/contest/1762&quot;&gt;여기&lt;/a&gt;에서 확인해 볼 수 있습니다.&lt;/p&gt;
&lt;h2 id=&quot;A-Divide-and-Conquer</description>
        
      
      
      
      <content:encoded><![CDATA[<p>갑자기 심심해서 코드포스 라운드를 진행해봤습니다. 진행한 대회는 <a href="https://codeforces.com/contest/1762">여기</a>에서 확인해 볼 수 있습니다.</p><h2 id="A-Divide-and-Conquer"><a href="#A-Divide-and-Conquer" class="headerlink" title="A. Divide and Conquer"></a><a href="https://codeforces.com/contest/1762/problem/A">A. Divide and Conquer</a></h2><p><strong>Verdict</strong> : Accepted (00:03)<br><strong>Rating</strong> : 800</p><p>보자마자 풀이는 떠올랐는데, 너무 오랜만에 하는 코포라 손이 느려서 구현하는데 좀 오래 걸렸습니다… 전성기의 박준성이었다면 2분 만에 해결 가능했을 것 같은데 아쉽네요.<br>그리고 템플릿을 준비했었는데 <code>using namespace std;</code>를 빼먹어서 다시 작성하는데도 시간을 잡아먹었습니다 ㅠㅠ.<br>합이 짝수가 아니라면 원소 중 단 하나의 parity만 바꾸어주면 됩니다. 그 때의 최소 비용은 모든 원소에 대해서 가장 작은 값을 골라주도록 합니다.</p><details><summary>코드</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF ((1LL&lt;&lt;31)-1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LINF ((1LL&lt;&lt;61)-1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MOD2 998244353</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TC() int CASE_N;cin&gt;&gt;CASE_N;for(int CASE_I=1;CASE_I&lt;=CASE_N;CASE_I++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FIX(a) cout&lt;&lt;fixed;cout.precision(a);</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ss second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> bp pop_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mt make_tuple</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> itos to_string</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(a) (int)((a).size())</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(v) (v).begin(), (v).end()</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int,int&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> vi vector<span class="string">&lt;int&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> wi vector<span class="string">&lt;vi&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> vp vector<span class="string">&lt;pii&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> wp vector<span class="string">&lt;vp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pow</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> </span>&#123;<span class="keyword">if</span> (!b) <span class="keyword">return</span> <span class="number">1</span>; <span class="type">int</span> rtn = <span class="built_in">pow</span>(a, b/<span class="number">2</span>, c); rtn = rtn * rtn % c; <span class="keyword">if</span> (b%<span class="number">2</span>) &#123;rtn = rtn * a % c;&#125; <span class="keyword">return</span> rtn;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">TC</span>() &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="function">vi <span class="title">v</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span> ; i &lt; n ; i++) cin &gt;&gt; v[i];</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span> ; i &lt; n ; i++) sum += v[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sum%<span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;0&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> nin = INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span> ; i &lt; n ; i++) &#123;</span><br><span class="line">            <span class="type">int</span> k = v[i], cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (k%<span class="number">2</span> == v[i]%<span class="number">2</span>) k /= <span class="number">2</span>, cnt++;</span><br><span class="line">            nin = <span class="built_in">min</span>(nin, cnt);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; nin &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="B-Make-Array-Good"><a href="#B-Make-Array-Good" class="headerlink" title="B. Make Array Good"></a><a href="https://codeforces.com/contest/1762/problem/B">B. Make Array Good</a></h2><p><strong>Verdict</strong> : Accepted (00:09)<br><strong>Rating</strong> : 1100</p><p>처음 문제를 잘못 이해해서 그냥 다 똑같은 숫자로 바꿔주면 되는 줄 알았는데 아니었습니다. 다시 읽어보니까 모든 원소를 $2^n$꼴로 바꾸어주면 해결해줄 수 있을 것 같아서 그렇게 문제를 풀었습니다.<br>무난하게 AC를 받는 데 성공하긴 했는데, 이거 스페셜저지를 어떻게 구현되어 있는지 좀 궁금하네요.</p><details><summary>코드</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF ((1LL&lt;&lt;31)-1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LINF ((1LL&lt;&lt;61)-1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MOD2 998244353</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TC() int CASE_N;cin&gt;&gt;CASE_N;for(int CASE_I=1;CASE_I&lt;=CASE_N;CASE_I++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FIX(a) cout&lt;&lt;fixed;cout.precision(a);</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ss second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> bp pop_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mt make_tuple</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> itos to_string</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(a) (int)((a).size())</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(v) (v).begin(), (v).end()</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int,int&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> vi vector<span class="string">&lt;int&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> wi vector<span class="string">&lt;vi&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> vp vector<span class="string">&lt;pii&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> wp vector<span class="string">&lt;vp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pow</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> </span>&#123;<span class="keyword">if</span> (!b) <span class="keyword">return</span> <span class="number">1</span>; <span class="type">int</span> rtn = <span class="built_in">pow</span>(a, b/<span class="number">2</span>, c); rtn = rtn * rtn % c; <span class="keyword">if</span> (b%<span class="number">2</span>) &#123;rtn = rtn * a % c;&#125; <span class="keyword">return</span> rtn;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">TC</span>() &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="function">vi <span class="title">v</span><span class="params">(n)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span> ; i &lt; n ; i++) cin &gt;&gt; v[i];</span><br><span class="line">        </span><br><span class="line">        cout &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span> ; i &lt; n ; i++) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="type">int</span> j = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (j &lt; v[i]) j *= <span class="number">2</span>;</span><br><span class="line">            cout &lt;&lt; i+<span class="number">1</span> &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; j-v[i] &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="C-Binary-Strings-are-Fun"><a href="#C-Binary-Strings-are-Fun" class="headerlink" title="C. Binary Strings are Fun"></a><a href="https://codeforces.com/contest/1762/problem/C">C. Binary Strings are Fun</a></h2><p><strong>Verdict</strong> : Accepted (00:54)<br><strong>Rating</strong> : 1400</p><p>역시 문제를 잘못 이해해서 30분 정도 날렸습니다. 모든 홀수 번째 index에 대해서 성립을 해야하는 줄 몰랐어요… 문자열 전체를 기준으로 생각 해야되는 줄 알고 시간을 좀 많이 버렸어요 ㅠㅠ.<br>모든 홀수 번째 index에 대해서 생각해야 하므로, $s[1, i]$을 어떻게 extension해야 하는지 결정되면 $s[1, i+1]$의 extension하는 방법에 대해서도 영향을 끼칩니다. $s[1, i]$의 extension은 $s[1, i+1]$의 extension의 부분 문자열이기 때문입니다.<br>이를 고려하여 코드를 작성하면 어렵지 않게 문제를 풀 수 있습니다. 근데 나는 나머지 연산 이슈 때문에 한 번 틀렸네요…</p><details><summary>코드</summary><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF ((1LL&lt;&lt;31)-1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LINF ((1LL&lt;&lt;61)-1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MOD2 998244353</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TC() int CASE_N;cin&gt;&gt;CASE_N;for(int CASE_I=1;CASE_I&lt;=CASE_N;CASE_I++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FIX(a) cout&lt;&lt;fixed;cout.precision(a);</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ff first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ss second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> bp pop_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mt make_tuple</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> itos to_string</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(a) (int)((a).size())</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(v) (v).begin(), (v).end()</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int,int&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> vi vector<span class="string">&lt;int&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> wi vector<span class="string">&lt;vi&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> vp vector<span class="string">&lt;pii&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> wp vector<span class="string">&lt;vp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pow</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> </span>&#123;<span class="keyword">if</span> (!b) <span class="keyword">return</span> <span class="number">1</span>; <span class="type">int</span> rtn = <span class="built_in">pow</span>(a, b/<span class="number">2</span>, c); rtn = rtn * rtn % c; <span class="keyword">if</span> (b%<span class="number">2</span>) &#123;rtn = rtn * a % c;&#125; <span class="keyword">return</span> rtn;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">TC</span>() &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        </span><br><span class="line">        string s;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> ans = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> now = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span> ; i &lt; n ; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == s[i<span class="number">-1</span>]) now *= <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span> now = <span class="number">1</span>;</span><br><span class="line">            now %= MOD2;</span><br><span class="line">            ans += now;</span><br><span class="line">            ans %= MOD2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="D-GCD-Queries"><a href="#D-GCD-Queries" class="headerlink" title="D. GCD Queries"></a><a href="https://codeforces.com/contest/1762/problem/D">D. GCD Queries</a></h2><p><strong>Verdict</strong> : Wrong Answer<br><strong>Rating</strong> : 2100</p><p>$gcd(p_i, p_j) &#x3D; gcd(p_i, p_k)$라면 $p_i$는 $0$이 될 수 없다는 점을 착안하여 문제를 풀어보려고 했습니다. 하지만 최대 쿼리 횟수 계산도 제대로 되지 않았고 정확한 문제 해결 절차를 떠올리지 못해서 결국 문제를 해결할 수 없었네요.<br>그거랑 별개로 C번과의 레이팅 차이가 700이나 나버린다니… 1700에서 1800대 정도로 하나 내줬으면 좋았을 것 같은데 좀 너무한 것 같네요.<br>풀이는 $gcd(p_i, p_j)$와 $gcd(p_i, p_k)$의 크기를 비교하여 $p_i, p_j, p_k$ 중 0이 될 수 없는 원소를 고르는 게 정해입니다. 조금만 더 고민해보면 비벼볼 수도 있었을 것 같은데 아쉽네요…</p><hr><p>E, F, G는 읽어보지도 못했어요. C번까지는 빨리 풀 수 있었던 것 같은데… 아쉬움이 남네요. 시간날 때마다 한번씩 돌려보면서 감을 좀 익혀야겠습니다.<br>글 읽어주셔서 감사합니다~. 좋은 하루 되세요!</p>]]></content:encoded>
      
      
      <category domain="http://rasauq1122.github.io/categories/codeforces/">codeforces</category>
      
      
      <category domain="http://rasauq1122.github.io/tags/Codeforces-Round-838-Div-2/">Codeforces Round 838 (Div. 2)</category>
      
      
      <comments>http://rasauq1122.github.io/2022/12/27/%EC%98%A4%EB%8A%98%EC%9D%98-%EC%BD%94%EB%93%9C%ED%8F%AC%EC%8A%A4/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ZOAC 2022 후기 2</title>
      <link>http://rasauq1122.github.io/2022/12/27/ZOAC-2022-%ED%9B%84%EA%B8%B0-2/</link>
      <guid>http://rasauq1122.github.io/2022/12/27/ZOAC-2022-%ED%9B%84%EA%B8%B0-2/</guid>
      <pubDate>Mon, 26 Dec 2022 17:37:49 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://rasauq1122.github.io/2022/12/26/ZOAC-2022-%ED%9B%84%EA%B8%B0-1/&quot;&gt;ZOAC 2022 후기 1&lt;/a&gt;을 읽고 오시면 더 좋습니다! :)&lt;/em&gt;&lt;br&gt;아쉽게도 </description>
        
      
      
      
      <content:encoded><![CDATA[<p><em><a href="https://rasauq1122.github.io/2022/12/26/ZOAC-2022-%ED%9B%84%EA%B8%B0-1/">ZOAC 2022 후기 1</a>을 읽고 오시면 더 좋습니다! :)</em><br>아쉽게도 F번 이후의 문제는 본 대회때 풀리지 않은 관계로 본 대회 정답률은 표기하지 않겠습니다.</p><h2 id="G-map-filter"><a href="#G-map-filter" class="headerlink" title="G. map, filter"></a><a href="https://www.acmicpc.net/problem/26600">G. map, filter</a></h2><p><strong>오픈 콘테스트 정답률</strong> : 5명 &#x2F; 197명 (2.5%)</p><p>효석이가 출제한 문제입니다. 예상 난이도는 골드 1~2 정도 생각했는데 실제로는 플래티넘 4로 예상보다 높은 티어를 받았습니다.<br>본 대회에서는 비교적 앞 쪽에 배치되어 있어서 그런지 몰라도 의외로 참가자 분들께서 제출을 많이 해주셨습니다. 하지만 대부분 TLE를 받으셔서 정답자는 없었습니다.<br>처음 문제를 봤을 때는 세그먼트 트리 비츠로 풀어야 하는 줄 알고 도망각을 좁혔지만, 문제를 차근차근 읽어보다가 굉장히 이상한 점 하나를 발견하였습니다. map 명령을 수행할 때 x가 굉장히 작다는 것이었죠! 그럼 나머지 연산을 한 번이라도 진행하면 원소는 모두 100보다 작은 수로 바뀌게 됩니다! 이 점을 떠올리고 나서 부터는 어떻게 문제를 풀어야 할지 갈피를 잡을 수 있습니다.</p><h2 id="H-가장-작은-수"><a href="#H-가장-작은-수" class="headerlink" title="H. 가장 작은 수"></a><a href="https://www.acmicpc.net/problem/26601">H. 가장 작은 수</a></h2><p><strong>오픈 콘테스트 정답률</strong> : 16명 &#x2F; 197명 (8.1%)</p><p>제가 출제한 문제입니다. 출제자인 저로써는 아무리 높아도 골드 3을 넘지 않을 것이라고 예상했는데 실제로는 플래티넘 4가 나와버려서 당황하고 있습니다. 다른 운영진 분들께서는 골드 1 정도 나올 것이라고 예상해주셨는데, 역시 그에 비해서는 높은 티어가 매겨졌습니다.<br>그래도 오픈 콘테스트에서는 더 낮은 티어가 매겨진 <a href="https://rasauq1122.github.io/2022/12/26/ZOAC-2022-%ED%9B%84%EA%B8%B0-1/#F-%EC%9A%A9-%EC%A1%B0%EB%A0%A8%EC%82%AC-%EB%A3%B0%EB%A3%A8">용 조련사 룰루</a>보다도 많이 풀려 6번째로 많이 풀린 문제가 되었습니다. 정말이지 아름답고도 신비로운 티어의 세계입니다.<br>이 문제의 초안이 작성된 것은 <a href="https://www.acmicpc.net/contest/view/560"><strong>ZOAC 2020</strong></a>의 <a href="https://www.acmicpc.net/problem/20444"><strong>I. 색종이와 가위</strong></a> 문제를 엎기 위해서였습니다. 당시에 <strong>색종이와 가위</strong>를 출제한 저는 이분탐색가 유일한 정해라고 믿었습니다. 하지만 그때 대회도 검수를 맡아주신 성우 형이 이차방정식의 근과 계수의 관계를 이용해 시간복잡도 $O(1)$의 풀이를 작성하는 것을 보고 너무 충격을 받았습니다… 그래서 문제를 엎고 대신 비슷한 난이도의 문제를 다시 출제하자고 생각해서 탄생한 문제가 바로 이 문제입니다.<br>하지만 이미 문제가 외부 검수진 분들께 넘어가서 검수까지 끝난 상태에서 문제를 다시 출제하는 것은 좀 아닌 것 같아서 비축하기로 했고, 이번 대회를 위해 가장 먼저 아이디어를 냈던 세 개의 문제 중 하나가 되었습니다.<br>저는 개인적으로 <a href="https://rasauq1122.github.io/2022/12/26/ZOAC-2022-%ED%9B%84%EA%B8%B0-1/#E-%EC%83%89%EC%A2%85%EC%9D%B4%EC%99%80-%EA%B3%B5%EC%98%88">색종이와 공예</a>보다도 쉬운 문제라고 생각했는데 내부 검수를 진행할 때 가장 오랫동안 풀리지 않아서 좀 많이 당황했습니다. 이에 대한 여파로 대회 도중에 이 문제에 대한 난이도 논의<del>(라기보다는 저의 일방적인 주장)</del>가 끊이지 않았는데 이 이야기는 조금 이따가 후술하는 것으로 하겠습니다.</p><h2 id="I-인생은-B와-D-사이의-C다"><a href="#I-인생은-B와-D-사이의-C다" class="headerlink" title="I. 인생은 B와 D 사이의 C다."></a><a href="https://www.acmicpc.net/problem/26602">I. 인생은 B와 D 사이의 C다.</a></h2><p><strong>오픈 콘테스트 정답률</strong> : 3명 &#x2F; 197명 (1.5%)</p><p>제가 출제한 문제입니다. 예상 난이도와 실제 난이도 사이의 큰 차이는 없습니다.<br>이번 대회를 위해 가장 먼저 아이디어를 냈던 세 개의 문제 중 하나입니다.<br>한창 군대에서 운동을 열심히 하다가 아이디어가 생각난 문제입니다. 동일 생활관 확진자 발생으로 격리자 숙소에서 혼자 격리를 하게 됐던 적이 있었습니다. 그 때의 저의 운동 본능은 격리로도 막을 수 없었기에 맨몸 운동을 유튜브에 검색하면서 혼자 방 안에서 열심히 운동했었죠. 진짜 열심히 살았었네요 ㅋㅋ;<br>아무튼 어느 날 운동을 다 마치고 씻고 있는데 머릿 속에 문제의 제목, 지문, 아이디어와 해결 방법을 모두 동시에 떠올리는 놀라운 경험을 했습니다. 역시 영감은 정말 뜬금없이 찾아오는 법이네요. 개인적으로 스크립트가 꽤 재밌게 잘 써진 것 같아서 마음에 드는 문제입니다 ㅎㅎ.<br>아 그래서 운동 언제 다시 시작하지…</p><h2 id="J-사기-주사위"><a href="#J-사기-주사위" class="headerlink" title="J. 사기 주사위"></a><a href="https://www.acmicpc.net/problem/26603">J. 사기 주사위</a></h2><p><strong>오픈 콘테스트 정답률</strong> : 4명 &#x2F; 197명 (2.0%)</p><p>민경 누나가 출제한 문제입니다. 운영진의 예상 난이도는 골드 4~5로, 실제 난이도인 골드 3에 비해 낮은 편입니다. 저는 아무리 낮아도 골드 3이라고 생각했습니다. 제 말이 맞았죠?<br>제가 검수한 문제 중에서는 가장 오래 걸린 문제입니다. 사실 문제의 초안이 지금과는 사뭇 달랐습니다. 원래는 약간 애드 혹이랑 케이스 워크가 섞인 문제였죠. 그래서 과거의 문제를 풀던 방식이 발목을 잡아 오래 걸린 것 같습니다.<br>그래서 문제를 푼 다음에 저는 이게 어떻게 골드 4~5냐고 딱 봐도 가장 작은 수보다 훨씬 어려운 문제라고 그렇게 주장했습니다. 저를 제외한 다른 내부 검수진 여러분께서는 전혀 동의해주질 않았고 거의 2개월 동안의 외로운 싸움이 있었습니다…<br>하지만! 결국 오픈 콘테스트에서 가장 작은 수가 사기 주사위보다 훨씬 많이 풀리며 사기 주사위가 훨씬 더 어려운 문제라는 것을 증명하는 데 성공했습니다! 가장 작은 수를 오픈 콘테스트에서 해결해주신 여러분들께 이 자리를 빌려 감사 말씀을 전합니다.<br>어떤 분은 사기 주사위가 더 뒤에 있어서 어쩔 수 없는 결과이니 인정하실 수 없다고 하지만… 알 게 뭐람? 더 많이 풀린 건 팩트잖아요~.</p><h2 id="K-순열-구하기"><a href="#K-순열-구하기" class="headerlink" title="K. 순열 구하기"></a><a href="https://www.acmicpc.net/problem/26604">K. 순열 구하기</a></h2><p><strong>오픈 콘테스트 정답률</strong> : 9명 &#x2F; 197명 (4.6%)</p><p>효석이가 출제한 문제입니다. 예상 난이도와 실제 난이도 사이의 큰 차이는 없습니다.<br>개인적으로 제일 재밌게 검수했던 문제입니다. 약간 코드포스 div2의 B번 같은 문제라고 할까요? 살짝만 고민해도 쉽게 풀 수 있는 문제라고 생각했습니다.<br>아마 본 대회에서 풀리지 않았던 것은 문제가 너무 뒤에 있기도 하고, xor 연산에 대한 거부 반응으로 아마 우선순위가 뒤로 밀리지 않았나 싶습니다. 오픈 콘테스트에서도 많이 안 풀려서 다소 아쉬웠던 문제입니다.</p><h2 id="L-형광펜-강민우"><a href="#L-형광펜-강민우" class="headerlink" title="L. 형광펜 강민우"></a><a href="https://www.acmicpc.net/problem/26605">L. 형광펜 강민우</a></h2><p><strong>오픈 콘테스트 정답률</strong> : 2명 &#x2F; 197명 (1.0%)</p><p>민경 누나가 출제한 문제입니다. 예상 난이도와 실제 난이도 사이의 큰 차이는 없습니다.<br>최소 컷 정리에 대한 부족한 지식으로 미처 검수를 진행하지 못했습니다 ㅠㅠ. 풀이를 들었는데도 이해가 잘 안됐습니다. 이해한 척해서 미안해요 누나.<br>내년에도 검수를 할 기회가 있게 된다면 강해진 저로 돌아와 어려운 알고리즘도 뚝딱뚝딱 검수해 보겠습니다. 아마도요.<br>근데 솔직히 오픈 콘테스트에서도 두 분만 풀어주셨으니까 제가 검수 못 해도 이상한 문제는 아닌 듯합니다. 아무튼 그렇습니다.</p><h2 id="M-이게-게임이냐"><a href="#M-이게-게임이냐" class="headerlink" title="M. 이게 게임이냐?"></a><a href="https://www.acmicpc.net/problem/26606">M. 이게 게임이냐?</a></h2><p><strong>오픈 콘테스트 정답률</strong> : 3명 &#x2F; 197명 (1.5%)</p><p>준호가 출제한 문제입니다. 예상 난이도와 실제 난이도 사이의 큰 차이는 없습니다.<br>드디어 대망의 마지막 문제입니다!<br>저에겐 시간 복잡도를 $O(N^5)$에서 $O(N^4)$로 줄이는 데 조금 고민이 필요했던 문제였습니다. 그거 외에는 구현 난이도가 조금 높다는 걸 제외하면 그냥저냥 풀만한 좋은 문제입니다.<br>근데 구현이 어려우면 아무래도 대회에서는 건들기 쉽지 않으니까 많이 풀리지 않은 것 같습니다. </p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>ZOAC 2022는 역대급으로 문제가 많이 출제된 대회였습니다.<br>그래서 대회를 4시간 정도로 좀 길게 열고 싶었지만 대회 외부적인 이슈로 연장은 어려운 상황이었습니다. 차선책은 문제 배열을 난이도 순으로 정렬하여 참가자들이 문제를 더 쉽게 풀 수 있는 환경을 만들어주는 것이었습니다. 다만 ZOAC의 근본은 무작위 난이도 배치에 있다며 모든 문제를 난이도 순으로 배열하면 재미가 없을 것 같다는 의견이 (주로 저에게서) 나와, 가장 쉬운 문제 6개 정도만 난이도 순으로 배열하기로 결정했습니다.<br>근데 그마저도 운영진이 문제의 난이도를 객관적으로 파악하는데 실패하여 <del>(솔직히 아직도 왜 이렇게 높게 나온지 모르겠습니다. ㅋㅋ;)</del> 본 대회 참가자들에게 조금 가혹한 대회가 아니었나 싶습니다…<br>다시 한 번 ZOAC 2022에 관심을 갖고 참여해주신 분들께 감사 인사를 드립니다. 운영진 분들도 다 수고 많으셨습니다!<br>ZOAC는 2023년도에 더 재밌고 퀄리티 높은 문제와 함께 돌아오겠습니다!<br>끝까지 읽어주셔서 감사합니다.  </p>]]></content:encoded>
      
      
      <category domain="http://rasauq1122.github.io/categories/contest/">contest</category>
      
      
      <category domain="http://rasauq1122.github.io/tags/ZOAC/">ZOAC</category>
      
      <category domain="http://rasauq1122.github.io/tags/ZOAC-2022/">ZOAC 2022</category>
      
      
      <comments>http://rasauq1122.github.io/2022/12/27/ZOAC-2022-%ED%9B%84%EA%B8%B0-2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ZOAC 2022 후기 1</title>
      <link>http://rasauq1122.github.io/2022/12/26/ZOAC-2022-%ED%9B%84%EA%B8%B0-1/</link>
      <guid>http://rasauq1122.github.io/2022/12/26/ZOAC-2022-%ED%9B%84%EA%B8%B0-1/</guid>
      <pubDate>Mon, 26 Dec 2022 01:52:46 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;시작하며&quot;&gt;&lt;a href=&quot;#시작하며&quot; class=&quot;headerlink&quot; title=&quot;시작하며&quot;&gt;&lt;/a&gt;시작하며&lt;/h2&gt;&lt;p&gt;안녕하세요. rasauq1122입니다.&lt;br&gt;2022년 12월 22일, 한양대 ERICA캠퍼스 알고리즘 학회 ‘</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="시작하며"><a href="#시작하며" class="headerlink" title="시작하며"></a>시작하며</h2><p>안녕하세요. rasauq1122입니다.<br>2022년 12월 22일, 한양대 ERICA캠퍼스 알고리즘 학회 ‘영과일’ 내부대회 및 경인지역 6개대학 연합 프로그래밍 경시대회 shake! 선발전 <a href="https://www.acmicpc.net/contest/view/921">Zero One Algorithm Contest 2022</a>(이하 ZOAC 5)가 개최되었습니다.  </p><p>출제는 <a href="https://www.acmicpc.net/user/rasauq1122">저</a>, <a href="https://www.acmicpc.net/user/mksmk606">민경 누나</a>, <a href="https://www.acmicpc.net/user/rhdqor213">준호</a>와 <a href="https://www.acmicpc.net/user/hyoseok">효석이</a>로 총 4명이 참가하였으며,<br>검수는 <a href="https://www.acmicpc.net/user/bsyun0571">병서 선배</a>, <a href="https://www.acmicpc.net/user/hellogaon">성우 형</a>, <a href="https://www.acmicpc.net/user/tony0942">tony0942</a>님, <a href="https://www.acmicpc.net/user/eaststar">eaststar</a>님, <a href="https://www.acmicpc.net/user/amsminn">amsminn</a>님께서 맡아주셨습니다.<br>대회 운영을 위해 힘써주신 출제진, 검수진 분들 모두 수고 많으셨습니다!  </p><p>문제는 A~F번까지는 난이도 순으로 배열하였고, G~M번은 무작위로 나열하였습니다.<br>하지만 문제가 백준에 공개되어 티어가 매겨진 지금, 저를 비롯한 운영진은 매겨진 티어가 운영진이 생각한 티어와 비교하여 더 어렵게 측정된 문제가 생각보다 많아서 당황하고 있습니다…<br>이에 대한 이야기를 비롯하여 문제를 검수 또는 출제하면서 들었던 생각을 작성해보려고 합니다.<br>그럼 알파벳 순서대로 차근차근 얘기해보겠습니다. 1부에서는 A번에서 F번까지만 다루도록 하겠습니다.</p><p>풀이는 <a href="https://upload.acmicpc.net/5720b2da-39c8-4f64-8f41-fd25476b4ecd/">여기</a>에서 확인해보실 수 있고, 이 포스팅에서는 따로 다루지 않습니다. :)</p><h2 id="A-ZOAC-5"><a href="#A-ZOAC-5" class="headerlink" title="A. ZOAC 5"></a><a href="https://www.acmicpc.net/problem/26594">A. ZOAC 5</a></h2><p><strong>본 대회 정답률</strong> : 14명 &#x2F; 14명 (100%)<br><strong>오픈 콘테스트 정답률</strong> : 187명 &#x2F; 197명 (94.9%)  </p><p>제가 출제한 문제입니다. 난이도는 브론즈 3 정도로 나오지 않을까 생각했고 실제로 그렇게 매겨졌습니다.<br>스크립트에서 소주를 마시는 모습을 빌려주신 성우 형에게 무궁한 영광을 돌립니다.<br>출제 의도는 모두가 풀 수 있을 만큼 쉬운 문자열 문제였고, 역시 본 대회에서 모두 다 풀어주셨습니다.<br>사실 ZOAC 2022는 출제진 사이에서 division을 나누어서 진행할지, 나누지 않고 하나의 대회로 진행할지 꽤 오랜 시간 논의되었습니다. 저는 나누어서 진행하자고 강력하게 주장했습니다만… 결국 참가자 유치 등의 문제로 하나의 대회로 진행하게 되었습니다.<br>divison을 나누어서 진행할 때를 대비하여 ZOAC 5의 Hard 버전을 만들어 놨는데, 그 문제에서는 동일한 알파벳을 여러 번 입력할 수 있는 경우도 주어지게 됩니다. 그 문제를 해결하기 위해서는 최대 공약수를 활용해야 할 것입니다.<br>오픈 콘테스트 진행하면서 가장 인상적인 코드는 문자열의 길이 $\div$ 4를 출력하는 코드였습니다.</p><h2 id="B-전투의-신"><a href="#B-전투의-신" class="headerlink" title="B. 전투의 신"></a><a href="https://www.acmicpc.net/problem/26595">B. 전투의 신</a></h2><p><strong>본 대회 정답률</strong> : 9명 &#x2F; 14명 (64.3%)<br><strong>오픈 콘테스트 정답률</strong> : 59명 &#x2F; 197명 (29.9%)  </p><p>민경 누나가 출제한 문제입니다. 난이도는 브론즈 1 정도로 생각했지만 실제로는 실버 4로 측정되었습니다.<br>원래는 골드 상위권 정도의 DP 문제로 출제를 하셨지만 전체적인 대회 난이도가 너무 어려워지는 걸 방지하기 위해 더 쉬운 문제로 바꾸어 다시 출제하신 문제입니다.<br>본 대회에서 당연히 A번 다음으로 가장 많이 풀릴 것이라고 출제진 모두가 예상하였지만, $Ax + By$라는 수식이 너무 무시무시했던 건지 C번보다도 적게 풀리는 대참사가 일어나고야 말았습니다…<br>이 참사는 오픈 콘테스트에서도 일어나고야 말았고 결국 실버 4의 티어가 매겨지게 되고 말았습니다.<br>근데 솔직히 제가 본 대회 참가자였어도 수식에 겁먹어서 C번부터 봤을 것 같긴 합니다 ㅎㅎ;</p><h2 id="C-황금-칵테일"><a href="#C-황금-칵테일" class="headerlink" title="C. 황금 칵테일"></a><a href="https://www.acmicpc.net/problem/26596">C. 황금 칵테일</a></h2><p><strong>본 대회 정답률</strong> : 13명 &#x2F; 14명 (92.9%)<br><strong>오픈 콘테스트 정답률</strong> : 66명 &#x2F; 197명 (33.5%)</p><p>준호가 출제한 문제입니다. 예상 난이도와 실제 난이도 사이의 큰 차이는 없습니다.<br>이분탐색을 활용하는 시간복잡도 $O(n\log{n})$의 풀이도 존재하지만, 역시 대회 난이도가 너무 어려워지는 걸 방지하기 위해 시간복잡도 $O(n^2)$의 풀이도 AC를 받을 수 있게끔 제한이 조정되었습니다.<br>C++ STL map이나 Python dictionary를 활용하여 쉽게 문제를 해결할 수 있습니다.  </p><h2 id="D-이-사람-왜-이렇게-1122를-좋아함"><a href="#D-이-사람-왜-이렇게-1122를-좋아함" class="headerlink" title="D. 이 사람 왜 이렇게 1122를 좋아함?"></a><a href="https://www.acmicpc.net/problem/26597">D. 이 사람 왜 이렇게 1122를 좋아함?</a></h2><p><strong>본 대회 정답률</strong> : 8명 &#x2F; 14명 (57.1%)<br><strong>오픈 콘테스트 정답률</strong> : 39명 &#x2F; 197명 (19.8%)</p><p>제가 출제한 문제입니다. 예상 난이도와 실제 난이도 사이의 큰 차이는 없습니다.<br>사실 제가 이번에 출제한 모든 문제의 시간 제한과 메모리 제한은 각각 1.122초, 1122MB 였습니다. 다만 동료 출제진들의 열렬한 반대로 외부 검수진 분들께 문제를 공개하기 전에 눈물을 머금고 제한을 수정했죠…<br>그래서 이 문제를 만들었습니다! 합법적으로 시간 제한과 메모리 제한을 1122로 도배하기 위해서 냅다 문제의 소재를 그것으로 삼았던 것이었죠! 라고 말은 하지만 사실 이미 제 문제의 대다수가 $N$ 또는 $Q$의 최대 범위로 111222를 채택하고 있습니다.<br>여담으로 준호가 저한테 저런 말을 한 적은 제가 기억한 바로는 없을 겁니다. 아마도.</p><h2 id="E-색종이와-공예"><a href="#E-색종이와-공예" class="headerlink" title="E. 색종이와 공예"></a><a href="https://www.acmicpc.net/problem/26598">E. 색종이와 공예</a></h2><p><strong>본 대회 정답률</strong> : 6명 &#x2F; 14명 (42.9%)<br><strong>오픈 콘테스트 정답률</strong> : 31명 &#x2F; 197명 (15.7%)</p><p>제가 출제한 문제입니다. 예상 난이도와 실제 난이도 사이의 큰 차이는 없습니다.<br>이번 대회를 위해 가장 먼저 아이디어를 냈던 세 개의 문제 중 하나입니다.<br>이 문제를 출제진끼리 공유하기 전까지 저는 이 문제를 쿼리형 문제로 내고 싶었습니다. 이를 테면 색종이의 일부분을 다시 직사각형 모양으로 잘라 그 부분이 예쁜 색종이 공예품인지 판단하는 문제와 같은 식으로요.<br>하지만 저는 끝까지 그런 식으로 문제를 푸는 방법을 떠올리지 못했고 그냥 적당히 타협해서 문제를 이대로 냈었습니다. 근데 이제 준호가 이 문제를 푸는데 쿼리당 $O(1)$로 풀 수 있는 방법으로 문제를 풀었던 겁니다! 그래서 ‘옳다구나!’하고 <em>준호식 풀이</em>로 날먹해서 새로 <strong>색종이와 공예와 쿼리</strong>라는 문제를 하나 더 낼 계획이었죠.<br>근데 이제 가장 먼저 검수를 시작한 성우형부터 다른 외부 검수진 분들도 다 이 문제를 <em>준호식 풀이</em>로 풀더라구요. 그래서 이 문제가 맞추면 다른 문제 하나를 공짜로 맞출 수 있는 보너스 문제가 될 것을 우려하여 결국 둘 중 한 문제를 제거하기로 했습니다. 그 결과 <strong>색종이와 공예와 쿼리</strong>는 <strong>이 사람 왜 이렇게 1122를 좋아함?</strong> 문제로 대체되었다는 비하인드가 있습니다.</p><h2 id="F-용-조련사-룰루"><a href="#F-용-조련사-룰루" class="headerlink" title="F. 용 조련사 룰루"></a><a href="https://www.acmicpc.net/problem/26599">F. 용 조련사 룰루</a></h2><p><strong>본 대회 정답률</strong> : 1명 &#x2F; 14명 (7.1%)<br><strong>오픈 콘테스트 정답률</strong> : 11명 &#x2F; 197명 (5.6%)</p><p>제가 출제한 문제입니다. 높아야 골드 5라고 예상했지만 실제로는 골드 1까지의 높은 난이도를 받았습니다.<br>이번 대회에서 가장 마음에 쏙 드는 최애 문제라고 할 수 있겠습니다.<br>강 건너기 문제에서 영감을 얻었습니다.<br>대회 난이도가 너무 높아질 것을 우려하여 민경 누나가 출제해야 할 문제가 마지막 한 문제만 남았을 때 저에게 쉬운 문제로 출제해달라 요구했습니다. (실버 정도의 난이도를 요구했습니다.) 쉬운 문제를 내기 위해 이것저것 생각하다가 이 문제를 떠올렸습니다. 이 문제가 너무 마음에 든 저는 ‘살짝 어렵긴 하지만 특별한 알고리즘이 필요한 게 아니고 조금 시간을 갖고 생각하면 충분히 맞출 수 있는 문제다.’라고 주장하며 대회에 내게 해달라고 하였습니다.<br>마침 우리 출제진 모두 그리디와 애드 혹에 꽤나 강했기 때문에(…) 이 문제는 높아야 골드 5 정도될 것이라고 생각하여 E번 다음으로 쉬운 문제라고 생각했고 F번에 배치되는 대참사가 일어나고 맙니다.<br>하지만 저 개인적으로는 <a href="https://www.acmicpc.net/contest/view/482">ZOAC 2019</a>에 출제되었던 <a href="https://www.acmicpc.net/problem/18239">편안한 수열 만들기</a>와 같은 애드 혹 문제를 꼭 내고 싶다는 소망을 이룰 수 있어서 참 좋았습니다.<br>또한 본 대회에서는 우승자가 이 문제를 맞춰 6솔로 우승을 할 수 있었다는 점과, 오픈 콘테스트에서 1등하신 <a href="https://www.acmicpc.net/user/xiaowuc1">xiaowuc1</a>님께서 이 문제를 해결하지 못하셔서 All-Solve가 나오지 않았다는 점에서도 굉장히 마음에 쏙 드는 효자 문제라고 할 수 있겠습니다.</p><h2 id="이어서"><a href="#이어서" class="headerlink" title="이어서"></a>이어서</h2><p><a href="https://rasauq1122.github.io/2022/12/26/ZOAC-2022-%ED%9B%84%EA%B8%B0-2/"><em>ZOAC 2022 후기 2</em></a>로 이어집니다.</p>]]></content:encoded>
      
      
      <category domain="http://rasauq1122.github.io/categories/contest/">contest</category>
      
      
      <category domain="http://rasauq1122.github.io/tags/ZOAC/">ZOAC</category>
      
      <category domain="http://rasauq1122.github.io/tags/ZOAC-2022/">ZOAC 2022</category>
      
      
      <comments>http://rasauq1122.github.io/2022/12/26/ZOAC-2022-%ED%9B%84%EA%B8%B0-1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>신장개업</title>
      <link>http://rasauq1122.github.io/2022/12/26/%EC%8B%A0%EC%9E%A5%EA%B0%9C%EC%97%85/</link>
      <guid>http://rasauq1122.github.io/2022/12/26/%EC%8B%A0%EC%9E%A5%EA%B0%9C%EC%97%85/</guid>
      <pubDate>Sun, 25 Dec 2022 23:09:23 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;안녕하세요. rasauq1122입니다.&lt;br&gt;최근 저는 한양대학교 ERICA캠퍼스 알고리즘 학회인 ‘영과일’에서 진행하는 알고리즘 대회 &lt;a href=&quot;https://www.acmicpc.net/contest/view/921&quot;&gt;Zero One A</description>
        
      
      
      
      <content:encoded><![CDATA[<p>안녕하세요. rasauq1122입니다.<br>최근 저는 한양대학교 ERICA캠퍼스 알고리즘 학회인 ‘영과일’에서 진행하는 알고리즘 대회 <a href="https://www.acmicpc.net/contest/view/921">Zero One Algorithm Contest 2022</a>에서 출제를 무사히 마쳤습니다. 꽤 오랜 시간 대회를 준비한 만큼 이에 대한 후기를 작성해보면 좋을 것 같아 블로그를 다시 시작하게 되었습니다.<br>지금껏 velog, tistory, naver 등의 플랫폼에서 블로그를 운영해보다가 결국 매번 때려치고 (ㅋㅋ;) 이번에 4~5번째 개업인 것 같네요. 다시 한 번 잘 부탁드립니다! </p>]]></content:encoded>
      
      
      <category domain="http://rasauq1122.github.io/categories/notice/">notice</category>
      
      
      
      <comments>http://rasauq1122.github.io/2022/12/26/%EC%8B%A0%EC%9E%A5%EA%B0%9C%EC%97%85/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
